
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  000019de  00001a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000164  00800136  00800136  00001aa8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001aa8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003261  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000151e  00000000  00000000  00005145  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cd7  00000000  00000000  00006663  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000910  00000000  00000000  0000833c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fb9  00000000  00000000  00008c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e8c  00000000  00000000  00009c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000ba91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_5>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__vector_16>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 31 06 	jmp	0xc62	; 0xc62 <__vector_20>
      54:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__vector_21>
      58:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      5c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      60:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      64:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      68:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      6c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      70:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      74:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      78:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2475>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2448>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
      b4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 34     ake Project by 4
      c4:	34 33 37 33 33 38 38 2d 4e 69 63 6b 00              4373388-Nick.

000000d1 <__c.2446>:
      d1:	53 6e 61 6b 65 00                                   Snake.

000000d7 <numbers>:
      d7:	42 01 3f 01 3b 01 37 01 33 01 2f 01 2b 01 27 01     B.?.;.7.3./.+.'.
      e7:	23 01 1f 01                                         #...

000000eb <letters>:
      eb:	b1 01 ad 01 a9 01 a5 01 a1 01 9d 01 99 01 95 01     ................
      fb:	92 01 8e 01 8a 01 86 01 81 01 7d 01 79 01 75 01     ..........}.y.u.
     10b:	70 01 6c 01 68 01 63 01 5f 01 5a 01 55 01 50 01     p.l.h.c._.Z.U.P.
     11b:	4b 01 46 01                                         K.F.

0000011f <cols_9>:
     11f:	64 92 92 7d                                         d..}

00000123 <cols_8>:
     123:	6c 92 92 6d                                         l..m

00000127 <cols_7>:
     127:	80 9e a0 c1                                         ....

0000012b <cols_6>:
     12b:	7c 92 92 4d                                         |..M

0000012f <cols_5>:
     12f:	e4 a2 a2 9d                                         ....

00000133 <cols_4>:
     133:	18 28 48 ff                                         .(H.

00000137 <cols_3>:
     137:	44 92 92 6d                                         D..m

0000013b <cols_2>:
     13b:	46 8a 92 63                                         F..c

0000013f <cols_1>:
     13f:	42 fe 03                                            B..

00000142 <cols_0>:
     142:	7c 92 a2 7d                                         |..}

00000146 <cols_Z>:
     146:	86 8a 92 a2 c3                                      .....

0000014b <cols_Y>:
     14b:	e0 10 0e 10 e1                                      .....

00000150 <cols_X>:
     150:	c6 28 10 28 c7                                      .(.(.

00000155 <cols_W>:
     155:	fc 02 1c 02 fd                                      .....

0000015a <cols_V>:
     15a:	f8 04 02 04 f9                                      .....

0000015f <cols_U>:
     15f:	fc 02 02 fd                                         ....

00000163 <cols_T>:
     163:	80 80 fe 80 81                                      .....

00000168 <cols_S>:
     168:	64 92 92 4d                                         d..M

0000016c <cols_R>:
     16c:	fe 90 98 67                                         ...g

00000170 <cols_Q>:
     170:	7c 82 8a 7c 03                                      |..|.

00000175 <cols_P>:
     175:	fe 90 90 61                                         ...a

00000179 <cols_O>:
     179:	7c 82 82 7d                                         |..}

0000017d <cols_N>:
     17d:	fe 20 10 ff                                         . ..

00000181 <cols_M>:
     181:	fe 40 30 40 ff                                      .@0@.

00000186 <cols_L>:
     186:	fe 02 02 03                                         ....

0000018a <cols_K>:
     18a:	fe 10 28 c7                                         ..(.

0000018e <cols_J>:
     18e:	04 02 02 fd                                         ....

00000192 <cols_I>:
     192:	82 fe 83                                            ...

00000195 <cols_H>:
     195:	fe 10 10 ff                                         ....

00000199 <cols_G>:
     199:	7c 82 92 5d                                         |..]

0000019d <cols_F>:
     19d:	fe 90 90 81                                         ....

000001a1 <cols_E>:
     1a1:	fe 92 92 83                                         ....

000001a5 <cols_D>:
     1a5:	fe 82 82 7d                                         ...}

000001a9 <cols_C>:
     1a9:	7c 82 82 45                                         |..E

000001ad <cols_B>:
     1ad:	fe 92 92 6d                                         ...m

000001b1 <cols_A>:
     1b1:	7e 90 90 7f                                         ~...

000001b5 <__c.2054>:
     1b5:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001bc <__c.2050>:
     1bc:	1b 5b 25 64 6d 00                                   .[%dm.

000001c2 <__c.2040>:
     1c2:	1b 5b 32 4a 00                                      .[2J.

000001c7 <__c.2025>:
     1c7:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf ef       	ldi	r28, 0xFF	; 255
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	11 e0       	ldi	r17, 0x01	; 1
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b1 e0       	ldi	r27, 0x01	; 1
     1e2:	ee ed       	ldi	r30, 0xDE	; 222
     1e4:	f9 e1       	ldi	r31, 0x19	; 25
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__do_copy_data+0x10>
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0
     1ec:	a6 33       	cpi	r26, 0x36	; 54
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <__do_copy_data+0xc>

000001f2 <__do_clear_bss>:
     1f2:	22 e0       	ldi	r18, 0x02	; 2
     1f4:	a6 e3       	ldi	r26, 0x36	; 54
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	aa 39       	cpi	r26, 0x9A	; 154
     1fe:	b2 07       	cpc	r27, r18
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 3c 04 	call	0x878	; 0x878 <main>
     206:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <_exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     20e:	e8 e6       	ldi	r30, 0x68	; 104
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	80 81       	ld	r24, Z
     214:	82 60       	ori	r24, 0x02	; 2
     216:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     218:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     21a:	ec e6       	ldi	r30, 0x6C	; 108
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8f 60       	ori	r24, 0x0F	; 15
     222:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     224:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
     228:	08 95       	ret

0000022a <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     22a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
     22e:	08 95       	ret

00000230 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     230:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     234:	18 16       	cp	r1, r24
     236:	3c f5       	brge	.+78     	; 0x286 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     238:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     23c:	6f b7       	in	r22, 0x3f	; 63
		cli();
     23e:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     240:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <__data_end>
     244:	92 30       	cpi	r25, 0x02	; 2
     246:	b4 f0       	brlt	.+44     	; 0x274 <button_pushed+0x44>
     248:	21 e0       	ldi	r18, 0x01	; 1
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     24e:	f9 01       	movw	r30, r18
     250:	e9 5c       	subi	r30, 0xC9	; 201
     252:	fe 4f       	sbci	r31, 0xFE	; 254
     254:	40 81       	ld	r20, Z
     256:	f9 01       	movw	r30, r18
     258:	ea 5c       	subi	r30, 0xCA	; 202
     25a:	fe 4f       	sbci	r31, 0xFE	; 254
     25c:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     25e:	9f 5f       	subi	r25, 0xFF	; 255
     260:	29 2f       	mov	r18, r25
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <__data_end>
     268:	04 2e       	mov	r0, r20
     26a:	00 0c       	add	r0, r0
     26c:	55 0b       	sbc	r21, r21
     26e:	24 17       	cp	r18, r20
     270:	35 07       	cpc	r19, r21
     272:	6c f3       	brlt	.-38     	; 0x24e <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     274:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <__data_end>
     278:	91 50       	subi	r25, 0x01	; 1
     27a:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <__data_end>
		
		if(interrupts_were_enabled) {
     27e:	66 23       	and	r22, r22
     280:	1c f4       	brge	.+6      	; 0x288 <button_pushed+0x58>
			// Turn them back on again
			sei();
     282:	78 94       	sei
     284:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     286:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     288:	08 95       	ret

0000028a <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	2f 93       	push	r18
     296:	3f 93       	push	r19
     298:	4f 93       	push	r20
     29a:	5f 93       	push	r21
     29c:	6f 93       	push	r22
     29e:	7f 93       	push	r23
     2a0:	8f 93       	push	r24
     2a2:	9f 93       	push	r25
     2a4:	ef 93       	push	r30
     2a6:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2a8:	43 b1       	in	r20, 0x03	; 3
     2aa:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2ac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
     2b0:	88 30       	cpi	r24, 0x08	; 8
     2b2:	64 f5       	brge	.+88     	; 0x30c <__vector_5+0x82>
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2b8:	64 2f       	mov	r22, r20
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	9b 01       	movw	r18, r22
     2be:	08 2e       	mov	r0, r24
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <__vector_5+0x3c>
     2c2:	35 95       	asr	r19
     2c4:	27 95       	ror	r18
     2c6:	0a 94       	dec	r0
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <__vector_5+0x38>
     2ca:	20 ff       	sbrs	r18, 0
     2cc:	1b c0       	rjmp	.+54     	; 0x304 <__vector_5+0x7a>
     2ce:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <last_button_state>
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	08 2e       	mov	r0, r24
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__vector_5+0x52>
     2d8:	35 95       	asr	r19
     2da:	27 95       	ror	r18
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <__vector_5+0x4e>
     2e0:	20 fd       	sbrc	r18, 0
     2e2:	10 c0       	rjmp	.+32     	; 0x304 <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2e4:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__data_end>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	2e 0f       	add	r18, r30
     2ec:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__data_end>
     2f0:	0e 2e       	mov	r0, r30
     2f2:	00 0c       	add	r0, r0
     2f4:	ff 0b       	sbc	r31, r31
     2f6:	e9 5c       	subi	r30, 0xC9	; 201
     2f8:	fe 4f       	sbci	r31, 0xFE	; 254
     2fa:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     2fc:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__data_end>
     300:	28 30       	cpi	r18, 0x08	; 8
     302:	24 f4       	brge	.+8      	; 0x30c <__vector_5+0x82>
     304:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     306:	84 30       	cpi	r24, 0x04	; 4
     308:	91 05       	cpc	r25, r1
     30a:	c1 f6       	brne	.-80     	; 0x2bc <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     30c:	40 93 3f 01 	sts	0x013F, r20	; 0x80013f <last_button_state>
}
     310:	ff 91       	pop	r31
     312:	ef 91       	pop	r30
     314:	9f 91       	pop	r25
     316:	8f 91       	pop	r24
     318:	7f 91       	pop	r23
     31a:	6f 91       	pop	r22
     31c:	5f 91       	pop	r21
     31e:	4f 91       	pop	r20
     320:	3f 91       	pop	r19
     322:	2f 91       	pop	r18
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <init_food>:
/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
}
     32e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <numFoodItems>
     332:	08 95       	ret

00000334 <food_at>:
     334:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <numFoodItems>
     338:	13 16       	cp	r1, r19
     33a:	84 f4       	brge	.+32     	; 0x35c <food_at+0x28>
     33c:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <foodPositions>
     340:	89 17       	cp	r24, r25
     342:	71 f0       	breq	.+28     	; 0x360 <food_at+0x2c>
     344:	e9 e7       	ldi	r30, 0x79	; 121
     346:	f1 e0       	ldi	r31, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	03 c0       	rjmp	.+6      	; 0x352 <food_at+0x1e>
     34c:	21 91       	ld	r18, Z+
     34e:	28 17       	cp	r18, r24
     350:	49 f0       	breq	.+18     	; 0x364 <food_at+0x30>
     352:	9f 5f       	subi	r25, 0xFF	; 255
     354:	39 13       	cpse	r19, r25
     356:	fa cf       	rjmp	.-12     	; 0x34c <food_at+0x18>
     358:	8f ef       	ldi	r24, 0xFF	; 255
     35a:	08 95       	ret
     35c:	8f ef       	ldi	r24, 0xFF	; 255
     35e:	08 95       	ret
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	08 95       	ret
     364:	89 2f       	mov	r24, r25
     366:	08 95       	ret

00000368 <is_food_at>:
     368:	0e 94 9a 01 	call	0x334	; 0x334 <food_at>
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	8f 3f       	cpi	r24, 0xFF	; 255
     370:	09 f4       	brne	.+2      	; 0x374 <is_food_at+0xc>
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	89 2f       	mov	r24, r25
     376:	08 95       	ret

00000378 <add_food_item>:
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <numFoodItems>
     386:	88 30       	cpi	r24, 0x08	; 8
     388:	d4 f5       	brge	.+116    	; 0x3fe <add_food_item+0x86>
     38a:	00 e0       	ldi	r16, 0x00	; 0
     38c:	10 e0       	ldi	r17, 0x00	; 0
     38e:	d0 e0       	ldi	r29, 0x00	; 0
     390:	c0 e0       	ldi	r28, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <add_food_item+0x20>
     394:	0f 5f       	subi	r16, 0xFF	; 255
     396:	1f 4f       	sbci	r17, 0xFF	; 255
     398:	2c 2f       	mov	r18, r28
     39a:	cc 0f       	add	r28, r28
     39c:	33 0b       	sbc	r19, r19
     39e:	2d 5f       	subi	r18, 0xFD	; 253
     3a0:	3f 4f       	sbci	r19, 0xFF	; 255
     3a2:	20 0f       	add	r18, r16
     3a4:	31 1f       	adc	r19, r17
     3a6:	2f 70       	andi	r18, 0x0F	; 15
     3a8:	30 78       	andi	r19, 0x80	; 128
     3aa:	33 23       	and	r19, r19
     3ac:	34 f4       	brge	.+12     	; 0x3ba <add_food_item+0x42>
     3ae:	21 50       	subi	r18, 0x01	; 1
     3b0:	31 09       	sbc	r19, r1
     3b2:	20 6f       	ori	r18, 0xF0	; 240
     3b4:	3f 6f       	ori	r19, 0xFF	; 255
     3b6:	2f 5f       	subi	r18, 0xFF	; 255
     3b8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ba:	82 2f       	mov	r24, r18
     3bc:	c2 2f       	mov	r28, r18
     3be:	6d 2f       	mov	r22, r29
     3c0:	dd 0f       	add	r29, r29
     3c2:	77 0b       	sbc	r23, r23
     3c4:	6b 5f       	subi	r22, 0xFB	; 251
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	67 70       	andi	r22, 0x07	; 7
     3ca:	70 78       	andi	r23, 0x80	; 128
     3cc:	77 23       	and	r23, r23
     3ce:	34 f4       	brge	.+12     	; 0x3dc <add_food_item+0x64>
     3d0:	61 50       	subi	r22, 0x01	; 1
     3d2:	71 09       	sbc	r23, r1
     3d4:	68 6f       	ori	r22, 0xF8	; 248
     3d6:	7f 6f       	ori	r23, 0xFF	; 255
     3d8:	6f 5f       	subi	r22, 0xFF	; 255
     3da:	7f 4f       	sbci	r23, 0xFF	; 255
     3dc:	d6 2f       	mov	r29, r22
     3de:	0e 94 f6 02 	call	0x5ec	; 0x5ec <position>
     3e2:	f8 2e       	mov	r15, r24
     3e4:	03 36       	cpi	r16, 0x63	; 99
     3e6:	11 05       	cpc	r17, r1
     3e8:	61 f0       	breq	.+24     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3ea:	0e 94 a6 07 	call	0xf4c	; 0xf4c <is_snake_at>
     3ee:	81 11       	cpse	r24, r1
     3f0:	d1 cf       	rjmp	.-94     	; 0x394 <add_food_item+0x1c>
     3f2:	8f 2d       	mov	r24, r15
     3f4:	0e 94 b4 01 	call	0x368	; 0x368 <is_food_at>
     3f8:	81 11       	cpse	r24, r1
     3fa:	cc cf       	rjmp	.-104    	; 0x394 <add_food_item+0x1c>
     3fc:	04 c0       	rjmp	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fe:	88 e0       	ldi	r24, 0x08	; 8
     400:	0f c0       	rjmp	.+30     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     402:	88 e0       	ldi	r24, 0x08	; 8
     404:	0d c0       	rjmp	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     406:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <numFoodItems>
     40a:	e8 2f       	mov	r30, r24
     40c:	08 2e       	mov	r0, r24
     40e:	00 0c       	add	r0, r0
     410:	ff 0b       	sbc	r31, r31
     412:	e8 58       	subi	r30, 0x88	; 136
     414:	fe 4f       	sbci	r31, 0xFE	; 254
     416:	f0 82       	st	Z, r15
     418:	8f 5f       	subi	r24, 0xFF	; 255
     41a:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <numFoodItems>
     41e:	8f 2d       	mov	r24, r15
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	08 95       	ret

0000042c <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     42c:	88 23       	and	r24, r24
     42e:	b4 f0       	brlt	.+44     	; 0x45c <remove_food+0x30>
     430:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <numFoodItems>
     434:	82 17       	cp	r24, r18
     436:	94 f4       	brge	.+36     	; 0x45c <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     438:	8f 5f       	subi	r24, 0xFF	; 255
     43a:	82 17       	cp	r24, r18
     43c:	64 f4       	brge	.+24     	; 0x456 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     43e:	e8 2f       	mov	r30, r24
     440:	08 2e       	mov	r0, r24
     442:	00 0c       	add	r0, r0
     444:	ff 0b       	sbc	r31, r31
     446:	e8 58       	subi	r30, 0x88	; 136
     448:	fe 4f       	sbci	r31, 0xFE	; 254
     44a:	90 81       	ld	r25, Z
     44c:	31 97       	sbiw	r30, 0x01	; 1
     44e:	90 83       	st	Z, r25
     450:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     452:	82 17       	cp	r24, r18
     454:	a4 f3       	brlt	.-24     	; 0x43e <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     456:	21 50       	subi	r18, 0x01	; 1
     458:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <numFoodItems>
     45c:	08 95       	ret

0000045e <update_display_at_position>:
#define SNAKE_BODY_COLOUR	COLOUR_GREEN
#define FOOD_COLOUR			COLOUR_LIGHT_YELLOW
#define BACKGROUND_COLOUR	COLOUR_BLACK

// Helper function
static void update_display_at_position(PosnType posn, PixelColour colour) {
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	c8 2f       	mov	r28, r24
     466:	16 2f       	mov	r17, r22
	ledmatrix_update_pixel(x_position(posn), y_position(posn), colour);
     468:	0e 94 ee 02 	call	0x5dc	; 0x5dc <y_position>
     46c:	d8 2f       	mov	r29, r24
     46e:	8c 2f       	mov	r24, r28
     470:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <x_position>
     474:	41 2f       	mov	r20, r17
     476:	6d 2f       	mov	r22, r29
     478:	0e 94 a4 02 	call	0x548	; 0x548 <ledmatrix_update_pixel>
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	08 95       	ret

00000484 <init_game>:

// Initialise game. This initialises the board with snake and food items 
// and puts them on the display.
void init_game(void) {
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
	// Clear display
	ledmatrix_clear();
     488:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ledmatrix_clear>
	
	// Initialise the snake and display it. We know the initial snake is only
	// of length two so we can just retrieve the tail and head positions
	init_snake();
     48c:	0e 94 84 06 	call	0xd08	; 0xd08 <init_snake>
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
     490:	0e 94 a5 06 	call	0xd4a	; 0xd4a <get_snake_head_position>
     494:	6f e0       	ldi	r22, 0x0F	; 15
     496:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display_at_position>
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
     49a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <get_snake_tail_position>
     49e:	60 ef       	ldi	r22, 0xF0	; 240
     4a0:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display_at_position>
	
	// Initialise our food store, then add three items of food and display them
	init_food();
     4a4:	0e 94 97 01 	call	0x32e	; 0x32e <init_food>
     4a8:	c3 e0       	ldi	r28, 0x03	; 3
	for(int8_t i = 0; i < 3; i++) {
		PosnType food_position = add_food_item();
     4aa:	0e 94 bc 01 	call	0x378	; 0x378 <add_food_item>
     4ae:	d8 2f       	mov	r29, r24
		if(is_position_valid(food_position)) {
     4b0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <is_position_valid>
     4b4:	88 23       	and	r24, r24
     4b6:	21 f0       	breq	.+8      	; 0x4c0 <init_game+0x3c>
			update_display_at_position(food_position, FOOD_COLOUR);
     4b8:	63 e3       	ldi	r22, 0x33	; 51
     4ba:	8d 2f       	mov	r24, r29
     4bc:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display_at_position>
     4c0:	c1 50       	subi	r28, 0x01	; 1
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
	
	// Initialise our food store, then add three items of food and display them
	init_food();
	for(int8_t i = 0; i < 3; i++) {
     4c2:	99 f7       	brne	.-26     	; 0x4aa <init_game+0x26>
		PosnType food_position = add_food_item();
		if(is_position_valid(food_position)) {
			update_display_at_position(food_position, FOOD_COLOUR);
		}
	}	
}
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <attempt_to_move_snake_forward>:

// Attempt to move snake forward. Returns true if successful, false otherwise
int8_t attempt_to_move_snake_forward(void) {
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
	PosnType prior_head_position = get_snake_head_position();
     4d2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <get_snake_head_position>
     4d6:	d8 2f       	mov	r29, r24
	int8_t move_result = advance_snake_head();
     4d8:	0e 94 ba 06 	call	0xd74	; 0xd74 <advance_snake_head>
     4dc:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     4de:	88 23       	and	r24, r24
     4e0:	4c f1       	brlt	.+82     	; 0x534 <attempt_to_move_snake_forward+0x6a>
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
	}
	PosnType new_head_position = get_snake_head_position();
     4e2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <get_snake_head_position>
     4e6:	18 2f       	mov	r17, r24
	if(move_result == ATE_FOOD || move_result == ATE_FOOD_BUT_CANT_GROW) {
     4e8:	8e ef       	ldi	r24, 0xFE	; 254
     4ea:	8c 0f       	add	r24, r28
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	80 f4       	brcc	.+32     	; 0x510 <attempt_to_move_snake_forward+0x46>
		// remove food item
		int8_t foodID = food_at(new_head_position);
     4f0:	81 2f       	mov	r24, r17
     4f2:	0e 94 9a 01 	call	0x334	; 0x334 <food_at>
		remove_food(foodID);
     4f6:	0e 94 16 02 	call	0x42c	; 0x42c <remove_food>
		
		// Add a new food item. Might fail if a free position can't be 
		// found on the board but shouldn't usually.
		PosnType new_food_posn = add_food_item();
     4fa:	0e 94 bc 01 	call	0x378	; 0x378 <add_food_item>
     4fe:	08 2f       	mov	r16, r24
		if(is_position_valid(new_food_posn)) {
     500:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <is_position_valid>
     504:	88 23       	and	r24, r24
     506:	21 f0       	breq	.+8      	; 0x510 <attempt_to_move_snake_forward+0x46>
			update_display_at_position(new_food_posn, FOOD_COLOUR);
     508:	63 e3       	ldi	r22, 0x33	; 51
     50a:	80 2f       	mov	r24, r16
     50c:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display_at_position>
	}
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW) {
     510:	cd 7f       	andi	r28, 0xFD	; 253
     512:	c1 30       	cpi	r28, 0x01	; 1
     514:	29 f4       	brne	.+10     	; 0x520 <attempt_to_move_snake_forward+0x56>
		PosnType prev_tail_posn = advance_snake_tail();
     516:	0e 94 6d 07 	call	0xeda	; 0xeda <advance_snake_tail>
		update_display_at_position(prev_tail_posn, BACKGROUND_COLOUR);
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display_at_position>
	}
	
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
     520:	60 ef       	ldi	r22, 0xF0	; 240
     522:	8d 2f       	mov	r24, r29
     524:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display_at_position>
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
     528:	6f e0       	ldi	r22, 0x0F	; 15
     52a:	81 2f       	mov	r24, r17
     52c:	0e 94 2f 02 	call	0x45e	; 0x45e <update_display_at_position>
	return 1;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	01 c0       	rjmp	.+2      	; 0x536 <attempt_to_move_snake_forward+0x6c>
	int8_t move_result = advance_snake_head();
	if(move_result < 0) {
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
     534:	80 e0       	ldi	r24, 0x00	; 0
	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	return 1;
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	08 95       	ret

00000540 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     540:	80 e8       	ldi	r24, 0x80	; 128
     542:	0e 94 c9 07 	call	0xf92	; 0xf92 <spi_setup_master>
     546:	08 95       	ret

00000548 <ledmatrix_update_pixel>:
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	80 31       	cpi	r24, 0x10	; 16
     550:	b0 f4       	brcc	.+44     	; 0x57e <ledmatrix_update_pixel+0x36>
     552:	68 30       	cpi	r22, 0x08	; 8
     554:	a0 f4       	brcc	.+40     	; 0x57e <ledmatrix_update_pixel+0x36>
     556:	14 2f       	mov	r17, r20
     558:	c6 2f       	mov	r28, r22
     55a:	d8 2f       	mov	r29, r24
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <spi_send_byte>
     562:	6c 2f       	mov	r22, r28
     564:	67 70       	andi	r22, 0x07	; 7
     566:	80 e1       	ldi	r24, 0x10	; 16
     568:	68 9f       	mul	r22, r24
     56a:	90 01       	movw	r18, r0
     56c:	11 24       	eor	r1, r1
     56e:	8d 2f       	mov	r24, r29
     570:	8f 70       	andi	r24, 0x0F	; 15
     572:	82 2b       	or	r24, r18
     574:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <spi_send_byte>
     578:	81 2f       	mov	r24, r17
     57a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <spi_send_byte>
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	08 95       	ret

00000586 <ledmatrix_update_column>:
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	80 31       	cpi	r24, 0x10	; 16
     590:	90 f4       	brcc	.+36     	; 0x5b6 <ledmatrix_update_column+0x30>
     592:	8b 01       	movw	r16, r22
     594:	c8 2f       	mov	r28, r24
     596:	83 e0       	ldi	r24, 0x03	; 3
     598:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <spi_send_byte>
     59c:	8c 2f       	mov	r24, r28
     59e:	8f 70       	andi	r24, 0x0F	; 15
     5a0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <spi_send_byte>
     5a4:	e8 01       	movw	r28, r16
     5a6:	08 5f       	subi	r16, 0xF8	; 248
     5a8:	1f 4f       	sbci	r17, 0xFF	; 255
     5aa:	89 91       	ld	r24, Y+
     5ac:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <spi_send_byte>
     5b0:	c0 17       	cp	r28, r16
     5b2:	d1 07       	cpc	r29, r17
     5b4:	d1 f7       	brne	.-12     	; 0x5aa <ledmatrix_update_column+0x24>
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	08 95       	ret

000005c0 <ledmatrix_shift_display_left>:
     5c0:	84 e0       	ldi	r24, 0x04	; 4
     5c2:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <spi_send_byte>
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <spi_send_byte>
     5cc:	08 95       	ret

000005ce <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     5ce:	8f e0       	ldi	r24, 0x0F	; 15
     5d0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <spi_send_byte>
     5d4:	08 95       	ret

000005d6 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
     5d6:	82 95       	swap	r24
     5d8:	8f 70       	andi	r24, 0x0F	; 15
     5da:	08 95       	ret

000005dc <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
     5dc:	8f 70       	andi	r24, 0x0F	; 15
     5de:	08 95       	ret

000005e0 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
     5e0:	83 fb       	bst	r24, 3
     5e2:	88 27       	eor	r24, r24
     5e4:	80 f9       	bld	r24, 0
}
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	89 27       	eor	r24, r25
     5ea:	08 95       	ret

000005ec <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
     5ec:	20 e1       	ldi	r18, 0x10	; 16
     5ee:	82 9f       	mul	r24, r18
     5f0:	c0 01       	movw	r24, r0
     5f2:	11 24       	eor	r1, r1
     5f4:	67 70       	andi	r22, 0x07	; 7
}
     5f6:	86 2b       	or	r24, r22
     5f8:	08 95       	ret

000005fa <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
     5fa:	0e 94 a0 02 	call	0x540	; 0x540 <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
     5fe:	0e 94 07 01 	call	0x20e	; 0x20e <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	7b e4       	ldi	r23, 0x4B	; 75
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 9c 05 	call	0xb38	; 0xb38 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
     610:	0e 94 2f 08 	call	0x105e	; 0x105e <init_timer0>
	
	// Turn on global interrupts
	sei();
     614:	78 94       	sei
     616:	08 95       	ret

00000618 <splash_screen>:
}

void splash_screen(void) {
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 19 08 	call	0x1032	; 0x1032 <set_display_attribute>
	clear_terminal();
     628:	0e 94 10 08 	call	0x1020	; 0x1020 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     62c:	0e 94 26 08 	call	0x104c	; 0x104c <hide_cursor>
	move_cursor(3,3);
     630:	63 e0       	ldi	r22, 0x03	; 3
     632:	83 e0       	ldi	r24, 0x03	; 3
     634:	0e 94 f7 07 	call	0xfee	; 0xfee <move_cursor>
	printf_P(PSTR("Snake"));
     638:	81 ed       	ldi	r24, 0xD1	; 209
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	0e 94 dd 09 	call	0x13ba	; 0x13ba <printf_P>
	
	move_cursor(3,5);
     644:	65 e0       	ldi	r22, 0x05	; 5
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	0e 94 f7 07 	call	0xfee	; 0xfee <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
     64c:	80 e2       	ldi	r24, 0x20	; 32
     64e:	0e 94 19 08 	call	0x1032	; 0x1032 <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by 44373388-Nick"));	
     652:	84 ea       	ldi	r24, 0xA4	; 164
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <printf_P>
	set_display_attribute(FG_WHITE);	// Return to default colour (White)
     65e:	85 e2       	ldi	r24, 0x25	; 37
     660:	0e 94 19 08 	call	0x1032	; 0x1032 <set_display_attribute>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     664:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ledmatrix_clear>
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
     670:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
     672:	0f 2e       	mov	r0, r31
     674:	ff e0       	ldi	r31, 0x0F	; 15
     676:	ff 2e       	mov	r15, r31
     678:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
     67a:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
     67c:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     67e:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE BY NICK - 44373388", colour);
     680:	6c 2f       	mov	r22, r28
     682:	8d e1       	ldi	r24, 0x1D	; 29
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 65 04 	call	0x8ca	; 0x8ca <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     68a:	0d c0       	rjmp	.+26     	; 0x6a6 <splash_screen+0x8e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     68c:	2f e7       	ldi	r18, 0x7F	; 127
     68e:	8c e2       	ldi	r24, 0x2C	; 44
     690:	93 e0       	ldi	r25, 0x03	; 3
     692:	21 50       	subi	r18, 0x01	; 1
     694:	80 40       	sbci	r24, 0x00	; 0
     696:	90 40       	sbci	r25, 0x00	; 0
     698:	e1 f7       	brne	.-8      	; 0x692 <splash_screen+0x7a>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <splash_screen+0x84>
     69c:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
     69e:	0e 94 18 01 	call	0x230	; 0x230 <button_pushed>
     6a2:	8f 3f       	cpi	r24, 0xFF	; 255
     6a4:	a9 f5       	brne	.+106    	; 0x710 <splash_screen+0xf8>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE BY NICK - 44373388", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
     6a6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <scroll_display>
     6aa:	81 11       	cpse	r24, r1
     6ac:	ef cf       	rjmp	.-34     	; 0x68c <splash_screen+0x74>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
     6ae:	0e 94 48 09 	call	0x1290	; 0x1290 <random>
     6b2:	dc 01       	movw	r26, r24
     6b4:	cb 01       	movw	r24, r22
     6b6:	83 70       	andi	r24, 0x03	; 3
     6b8:	99 27       	eor	r25, r25
     6ba:	aa 27       	eor	r26, r26
     6bc:	b0 78       	andi	r27, 0x80	; 128
     6be:	bb 23       	and	r27, r27
     6c0:	54 f4       	brge	.+20     	; 0x6d6 <splash_screen+0xbe>
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	a1 09       	sbc	r26, r1
     6c6:	b1 09       	sbc	r27, r1
     6c8:	8c 6f       	ori	r24, 0xFC	; 252
     6ca:	9f 6f       	ori	r25, 0xFF	; 255
     6cc:	af 6f       	ori	r26, 0xFF	; 255
     6ce:	bf 6f       	ori	r27, 0xFF	; 255
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	a1 1d       	adc	r26, r1
     6d4:	b1 1d       	adc	r27, r1
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	91 05       	cpc	r25, r1
     6da:	a1 05       	cpc	r26, r1
     6dc:	b1 05       	cpc	r27, r1
     6de:	91 f0       	breq	.+36     	; 0x704 <splash_screen+0xec>
     6e0:	2c f4       	brge	.+10     	; 0x6ec <splash_screen+0xd4>
     6e2:	89 2b       	or	r24, r25
     6e4:	8a 2b       	or	r24, r26
     6e6:	8b 2b       	or	r24, r27
     6e8:	59 f0       	breq	.+22     	; 0x700 <splash_screen+0xe8>
     6ea:	ca cf       	rjmp	.-108    	; 0x680 <splash_screen+0x68>
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	91 05       	cpc	r25, r1
     6f0:	a1 05       	cpc	r26, r1
     6f2:	b1 05       	cpc	r27, r1
     6f4:	49 f0       	breq	.+18     	; 0x708 <splash_screen+0xf0>
     6f6:	03 97       	sbiw	r24, 0x03	; 3
     6f8:	a1 05       	cpc	r26, r1
     6fa:	b1 05       	cpc	r27, r1
     6fc:	39 f0       	breq	.+14     	; 0x70c <splash_screen+0xf4>
     6fe:	c0 cf       	rjmp	.-128    	; 0x680 <splash_screen+0x68>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
     700:	cd 2f       	mov	r28, r29
     702:	be cf       	rjmp	.-132    	; 0x680 <splash_screen+0x68>
			case 1: colour = COLOUR_RED; break;
     704:	cf 2d       	mov	r28, r15
     706:	bc cf       	rjmp	.-136    	; 0x680 <splash_screen+0x68>
			case 2: colour = COLOUR_YELLOW; break;
     708:	c0 2f       	mov	r28, r16
     70a:	ba cf       	rjmp	.-140    	; 0x680 <splash_screen+0x68>
			case 3: colour = COLOUR_GREEN; break;
     70c:	c1 2f       	mov	r28, r17
     70e:	b8 cf       	rjmp	.-144    	; 0x680 <splash_screen+0x68>
		}
	}
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	ff 90       	pop	r15
     71a:	08 95       	ret

0000071c <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
     71c:	0e 94 10 08 	call	0x1020	; 0x1020 <clear_terminal>
	
	// Initialise the game and display
	init_game();
     720:	0e 94 42 02 	call	0x484	; 0x484 <init_game>
		
	// Initialise the score
	init_score();
     724:	0e 94 47 04 	call	0x88e	; 0x88e <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
     728:	0e 94 15 01 	call	0x22a	; 0x22a <empty_button_queue>
	clear_serial_input_buffer();
     72c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <clear_serial_input_buffer>
     730:	08 95       	ret

00000732 <play_game>:
}

void play_game(void) {
     732:	4f 92       	push	r4
     734:	5f 92       	push	r5
     736:	6f 92       	push	r6
     738:	7f 92       	push	r7
     73a:	bf 92       	push	r11
     73c:	cf 92       	push	r12
     73e:	df 92       	push	r13
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
     74c:	0e 94 4d 08 	call	0x109a	; 0x109a <get_clock_ticks>
     750:	6b 01       	movw	r12, r22
     752:	7c 01       	movw	r14, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     754:	d0 e0       	ldi	r29, 0x00	; 0
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     756:	bb 24       	eor	r11, r11
     758:	ba 94       	dec	r11
		
		if(button == -1) {
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     75a:	04 e9       	ldi	r16, 0x94	; 148
     75c:	12 e0       	ldi	r17, 0x02	; 2
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     75e:	0e 94 18 01 	call	0x230	; 0x230 <button_pushed>
     762:	c8 2f       	mov	r28, r24
		
		if(button == -1) {
     764:	8f 3f       	cpi	r24, 0xFF	; 255
     766:	09 f0       	breq	.+2      	; 0x76a <play_game+0x38>
     768:	51 c0       	rjmp	.+162    	; 0x80c <play_game+0xda>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     76a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <serial_input_available>
     76e:	88 23       	and	r24, r24
     770:	71 f1       	breq	.+92     	; 0x7ce <play_game+0x9c>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     772:	f8 01       	movw	r30, r16
     774:	80 81       	ld	r24, Z
     776:	91 81       	ldd	r25, Z+1	; 0x01
     778:	0e 94 9f 09 	call	0x133e	; 0x133e <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     77c:	d1 11       	cpse	r29, r1
     77e:	04 c0       	rjmp	.+8      	; 0x788 <play_game+0x56>
     780:	8b 31       	cpi	r24, 0x1B	; 27
     782:	f1 f1       	breq	.+124    	; 0x800 <play_game+0xce>
     784:	8b 2d       	mov	r24, r11
     786:	08 c0       	rjmp	.+16     	; 0x798 <play_game+0x66>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     788:	d1 30       	cpi	r29, 0x01	; 1
     78a:	21 f4       	brne	.+8      	; 0x794 <play_game+0x62>
     78c:	8b 35       	cpi	r24, 0x5B	; 91
     78e:	d1 f1       	breq	.+116    	; 0x804 <play_game+0xd2>
     790:	8b 2d       	mov	r24, r11
     792:	02 c0       	rjmp	.+4      	; 0x798 <play_game+0x66>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
     794:	d2 30       	cpi	r29, 0x02	; 2
     796:	c1 f5       	brne	.+112    	; 0x808 <play_game+0xd6>
				}
			}
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
     798:	83 34       	cpi	r24, 0x43	; 67
     79a:	d9 f5       	brne	.+118    	; 0x812 <play_game+0xe0>
     79c:	d0 e0       	ldi	r29, 0x00	; 0
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0e 94 84 07 	call	0xf08	; 0xf08 <set_snake_dirn>
     7a4:	14 c0       	rjmp	.+40     	; 0x7ce <play_game+0x9c>
     7a6:	d0 e0       	ldi	r29, 0x00	; 0
		} else  if (button==2 || escape_sequence_char == 'A') {
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	0e 94 84 07 	call	0xf08	; 0xf08 <set_snake_dirn>
     7ae:	0f c0       	rjmp	.+30     	; 0x7ce <play_game+0x9c>
		} else if(button==3 || escape_sequence_char=='D') {
     7b0:	c3 30       	cpi	r28, 0x03	; 3
     7b2:	11 f0       	breq	.+4      	; 0x7b8 <play_game+0x86>
     7b4:	84 34       	cpi	r24, 0x44	; 68
     7b6:	21 f4       	brne	.+8      	; 0x7c0 <play_game+0x8e>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);// YOUR CODE HERE
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	0e 94 84 07 	call	0xf08	; 0xf08 <set_snake_dirn>
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <play_game+0x9c>
		} else if (button==1 || escape_sequence_char == 'B') {
     7c0:	c1 30       	cpi	r28, 0x01	; 1
     7c2:	11 f0       	breq	.+4      	; 0x7c8 <play_game+0x96>
     7c4:	82 34       	cpi	r24, 0x42	; 66
     7c6:	19 f4       	brne	.+6      	; 0x7ce <play_game+0x9c>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);// YOUR CODE HERE
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 84 07 	call	0xf08	; 0xf08 <set_snake_dirn>
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + 600) {
     7ce:	0e 94 4d 08 	call	0x109a	; 0x109a <get_clock_ticks>
     7d2:	26 01       	movw	r4, r12
     7d4:	37 01       	movw	r6, r14
     7d6:	f8 e5       	ldi	r31, 0x58	; 88
     7d8:	4f 0e       	add	r4, r31
     7da:	f2 e0       	ldi	r31, 0x02	; 2
     7dc:	5f 1e       	adc	r5, r31
     7de:	61 1c       	adc	r6, r1
     7e0:	71 1c       	adc	r7, r1
     7e2:	64 15       	cp	r22, r4
     7e4:	75 05       	cpc	r23, r5
     7e6:	86 05       	cpc	r24, r6
     7e8:	97 05       	cpc	r25, r7
     7ea:	08 f4       	brcc	.+2      	; 0x7ee <play_game+0xbc>
     7ec:	b8 cf       	rjmp	.-144    	; 0x75e <play_game+0x2c>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
     7ee:	0e 94 65 02 	call	0x4ca	; 0x4ca <attempt_to_move_snake_forward>
     7f2:	88 23       	and	r24, r24
     7f4:	b1 f0       	breq	.+44     	; 0x822 <play_game+0xf0>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
     7f6:	0e 94 4d 08 	call	0x109a	; 0x109a <get_clock_ticks>
     7fa:	6b 01       	movw	r12, r22
     7fc:	7c 01       	movw	r14, r24
     7fe:	af cf       	rjmp	.-162    	; 0x75e <play_game+0x2c>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     800:	d1 e0       	ldi	r29, 0x01	; 1
     802:	e5 cf       	rjmp	.-54     	; 0x7ce <play_game+0x9c>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     804:	d2 e0       	ldi	r29, 0x02	; 2
     806:	e3 cf       	rjmp	.-58     	; 0x7ce <play_game+0x9c>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
     808:	d0 e0       	ldi	r29, 0x00	; 0
     80a:	e1 cf       	rjmp	.-62     	; 0x7ce <play_game+0x9c>
				}
			}
		}
		
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
     80c:	88 23       	and	r24, r24
     80e:	39 f2       	breq	.-114    	; 0x79e <play_game+0x6c>
     810:	04 c0       	rjmp	.+8      	; 0x81a <play_game+0xe8>
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
     812:	81 34       	cpi	r24, 0x41	; 65
     814:	41 f2       	breq	.-112    	; 0x7a6 <play_game+0x74>
     816:	d0 e0       	ldi	r29, 0x00	; 0
     818:	cb cf       	rjmp	.-106    	; 0x7b0 <play_game+0x7e>
     81a:	82 30       	cpi	r24, 0x02	; 2
     81c:	29 f2       	breq	.-118    	; 0x7a8 <play_game+0x76>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     81e:	8b 2d       	mov	r24, r11
     820:	c7 cf       	rjmp	.-114    	; 0x7b0 <play_game+0x7e>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	7f 90       	pop	r7
     836:	6f 90       	pop	r6
     838:	5f 90       	pop	r5
     83a:	4f 90       	pop	r4
     83c:	08 95       	ret

0000083e <handle_game_over>:

void handle_game_over() {
	move_cursor(10,14);
     83e:	6e e0       	ldi	r22, 0x0E	; 14
     840:	8a e0       	ldi	r24, 0x0A	; 10
     842:	0e 94 f7 07 	call	0xfee	; 0xfee <move_cursor>
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
     846:	8a e9       	ldi	r24, 0x9A	; 154
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	9f 93       	push	r25
     84c:	8f 93       	push	r24
     84e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <printf_P>
	move_cursor(10,15);
     852:	6f e0       	ldi	r22, 0x0F	; 15
     854:	8a e0       	ldi	r24, 0x0A	; 10
     856:	0e 94 f7 07 	call	0xfee	; 0xfee <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     85a:	8c e7       	ldi	r24, 0x7C	; 124
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	9f 93       	push	r25
     860:	8f 93       	push	r24
     862:	0e 94 dd 09 	call	0x13ba	; 0x13ba <printf_P>
	while(button_pushed() == -1) {
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0e 94 18 01 	call	0x230	; 0x230 <button_pushed>
     872:	8f 3f       	cpi	r24, 0xFF	; 255
     874:	e1 f3       	breq	.-8      	; 0x86e <handle_game_over+0x30>
		; // wait until a button has been pushed
	}
	
}
     876:	08 95       	ret

00000878 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     878:	0e 94 fd 02 	call	0x5fa	; 0x5fa <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     87c:	0e 94 0c 03 	call	0x618	; 0x618 <splash_screen>
	
	while(1) {
		new_game();
     880:	0e 94 8e 03 	call	0x71c	; 0x71c <new_game>
		play_game();
     884:	0e 94 99 03 	call	0x732	; 0x732 <play_game>
		handle_game_over();
     888:	0e 94 1f 04 	call	0x83e	; 0x83e <handle_game_over>
     88c:	f9 cf       	rjmp	.-14     	; 0x880 <main+0x8>

0000088e <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
     88e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <score>
     892:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <score+0x1>
     896:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <score+0x2>
     89a:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <score+0x3>
     89e:	08 95       	ret

000008a0 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
     8a0:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <score>
     8a4:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <score+0x1>
     8a8:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <score+0x2>
     8ac:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <score+0x3>
     8b0:	48 0f       	add	r20, r24
     8b2:	59 1f       	adc	r21, r25
     8b4:	61 1d       	adc	r22, r1
     8b6:	71 1d       	adc	r23, r1
     8b8:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <score>
     8bc:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <score+0x1>
     8c0:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <score+0x2>
     8c4:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <score+0x3>
     8c8:	08 95       	ret

000008ca <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
     8ca:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
     8ce:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <display_string+0x1>
     8d2:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <display_string>
	next_col_ptr = 0;
     8d6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <next_col_ptr+0x1>
     8da:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <next_col_ptr>
	next_char_to_display = 0;
     8de:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <next_char_to_display+0x1>
     8e2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <next_char_to_display>
     8e6:	08 95       	ret

000008e8 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	cd b7       	in	r28, 0x3d	; 61
     8f2:	de b7       	in	r29, 0x3e	; 62
     8f4:	28 97       	sbiw	r28, 0x08	; 8
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
     900:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <next_col_ptr>
     904:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <next_col_ptr+0x1>
     908:	30 97       	sbiw	r30, 0x00	; 0
     90a:	81 f0       	breq	.+32     	; 0x92c <__stack+0x2d>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
     90c:	14 91       	lpm	r17, Z

		if(col_data & 1) {
     90e:	10 ff       	sbrs	r17, 0
     910:	06 c0       	rjmp	.+12     	; 0x91e <__stack+0x1f>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
     912:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <next_col_ptr+0x1>
     916:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     91a:	00 e0       	ldi	r16, 0x00	; 0
     91c:	6b c0       	rjmp	.+214    	; 0x9f4 <__stack+0xf5>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
     91e:	31 96       	adiw	r30, 0x01	; 1
     920:	f0 93 4a 01 	sts	0x014A, r31	; 0x80014a <next_col_ptr+0x1>
     924:	e0 93 49 01 	sts	0x0149, r30	; 0x800149 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     928:	00 e0       	ldi	r16, 0x00	; 0
     92a:	64 c0       	rjmp	.+200    	; 0x9f4 <__stack+0xf5>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
     92c:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <next_char_to_display>
     930:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <next_char_to_display+0x1>
     934:	30 97       	sbiw	r30, 0x00	; 0
     936:	09 f4       	brne	.+2      	; 0x93a <__stack+0x3b>
     938:	49 c0       	rjmp	.+146    	; 0x9cc <__stack+0xcd>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
     93a:	cf 01       	movw	r24, r30
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <next_char_to_display+0x1>
     942:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <next_char_to_display>
     946:	e0 81       	ld	r30, Z
		if(next_char == 0) {
     948:	e1 11       	cpse	r30, r1
     94a:	0a c0       	rjmp	.+20     	; 0x960 <__stack+0x61>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
     94c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <next_char_to_display+0x1>
     950:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <next_char_to_display>
			shift_countdown = 16;
     954:	80 e1       	ldi	r24, 0x10	; 16
     956:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     95a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     95c:	10 e0       	ldi	r17, 0x00	; 0
     95e:	4a c0       	rjmp	.+148    	; 0x9f4 <__stack+0xf5>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
     960:	8f e9       	ldi	r24, 0x9F	; 159
     962:	8e 0f       	add	r24, r30
     964:	8a 31       	cpi	r24, 0x1A	; 26
     966:	70 f4       	brcc	.+28     	; 0x984 <__stack+0x85>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	e7 5d       	subi	r30, 0xD7	; 215
     970:	ff 4f       	sbci	r31, 0xFF	; 255
     972:	85 91       	lpm	r24, Z+
     974:	94 91       	lpm	r25, Z
     976:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <next_col_ptr+0x1>
     97a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     97e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     980:	10 e0       	ldi	r17, 0x00	; 0
     982:	38 c0       	rjmp	.+112    	; 0x9f4 <__stack+0xf5>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
     984:	8f eb       	ldi	r24, 0xBF	; 191
     986:	8e 0f       	add	r24, r30
     988:	8a 31       	cpi	r24, 0x1A	; 26
     98a:	70 f4       	brcc	.+28     	; 0x9a8 <__stack+0xa9>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	ee 0f       	add	r30, r30
     990:	ff 1f       	adc	r31, r31
     992:	e7 59       	subi	r30, 0x97	; 151
     994:	ff 4f       	sbci	r31, 0xFF	; 255
     996:	85 91       	lpm	r24, Z+
     998:	94 91       	lpm	r25, Z
     99a:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <next_col_ptr+0x1>
     99e:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     9a2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     9a4:	10 e0       	ldi	r17, 0x00	; 0
     9a6:	26 c0       	rjmp	.+76     	; 0x9f4 <__stack+0xf5>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
     9a8:	80 ed       	ldi	r24, 0xD0	; 208
     9aa:	8e 0f       	add	r24, r30
     9ac:	8a 30       	cpi	r24, 0x0A	; 10
     9ae:	00 f5       	brcc	.+64     	; 0x9f0 <__stack+0xf1>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	e9 58       	subi	r30, 0x89	; 137
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ba:	85 91       	lpm	r24, Z+
     9bc:	94 91       	lpm	r25, Z
     9be:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <next_col_ptr+0x1>
     9c2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     9c6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     9c8:	10 e0       	ldi	r17, 0x00	; 0
     9ca:	14 c0       	rjmp	.+40     	; 0x9f4 <__stack+0xf5>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
     9cc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <display_string>
     9d0:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     9d4:	01 e0       	ldi	r16, 0x01	; 1
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	09 f0       	breq	.+2      	; 0x9dc <__stack+0xdd>
     9da:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
     9dc:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <next_char_to_display+0x1>
     9e0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <next_char_to_display>
		display_string = 0;
     9e4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <display_string+0x1>
     9e8:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     9ec:	10 e0       	ldi	r17, 0x00	; 0
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <__stack+0xf5>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     9f0:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     9f2:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
     9f4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
     9f8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
     9fc:	fe 01       	movw	r30, r28
     9fe:	38 96       	adiw	r30, 0x08	; 8
     a00:	ce 01       	movw	r24, r28
     a02:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
     a04:	11 23       	and	r17, r17
     a06:	14 f4       	brge	.+4      	; 0xa0c <__stack+0x10d>
			column_colour_data[i] = colour;
     a08:	20 83       	st	Z, r18
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <__stack+0x10f>
		} else {
			column_colour_data[i] = 0;
     a0c:	10 82       	st	Z, r1
		}
		col_data <<= 1;
     a0e:	11 0f       	add	r17, r17
     a10:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
     a12:	e8 17       	cp	r30, r24
     a14:	f9 07       	cpc	r31, r25
     a16:	b1 f7       	brne	.-20     	; 0xa04 <__stack+0x105>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
     a18:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
     a1a:	be 01       	movw	r22, r28
     a1c:	6f 5f       	subi	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	8f e0       	ldi	r24, 0x0F	; 15
     a22:	0e 94 c3 02 	call	0x586	; 0x586 <ledmatrix_update_column>
	if(shift_countdown > 0) {
     a26:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <shift_countdown.1854>
     a2a:	88 23       	and	r24, r24
     a2c:	89 f0       	breq	.+34     	; 0xa50 <__stack+0x151>
		shift_countdown--;
     a2e:	81 50       	subi	r24, 0x01	; 1
     a30:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
     a34:	00 23       	and	r16, r16
     a36:	11 f0       	breq	.+4      	; 0xa3c <__stack+0x13d>
     a38:	88 23       	and	r24, r24
     a3a:	11 f0       	breq	.+4      	; 0xa40 <__stack+0x141>
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	03 c0       	rjmp	.+6      	; 0xa46 <__stack+0x147>
     a40:	91 e0       	ldi	r25, 0x01	; 1
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <__stack+0x147>
     a44:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	99 23       	and	r25, r25
     a4a:	29 f0       	breq	.+10     	; 0xa56 <__stack+0x157>
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	03 c0       	rjmp	.+6      	; 0xa56 <__stack+0x157>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
     a50:	00 23       	and	r16, r16
     a52:	a1 f3       	breq	.-24     	; 0xa3c <__stack+0x13d>
     a54:	f7 cf       	rjmp	.-18     	; 0xa44 <__stack+0x145>
	return !finished;
}
     a56:	28 96       	adiw	r28, 0x08	; 8
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     a6c:	cf 93       	push	r28
     a6e:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     a70:	8a 30       	cpi	r24, 0x0A	; 10
     a72:	19 f4       	brne	.+6      	; 0xa7a <uart_put_char+0xe>
		uart_put_char('\r', stream);
     a74:	8d e0       	ldi	r24, 0x0D	; 13
     a76:	0e 94 36 05 	call	0xa6c	; 0xa6c <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     a7a:	9f b7       	in	r25, 0x3f	; 63
     a7c:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <uart_put_char+0x18>
		if(!interrupts_enabled) {
     a80:	99 23       	and	r25, r25
     a82:	29 f1       	breq	.+74     	; 0xace <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     a84:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <bytes_in_out_buffer>
     a88:	8f 3f       	cpi	r24, 0xFF	; 255
     a8a:	d1 f3       	breq	.-12     	; 0xa80 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     a8c:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     a8e:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <out_insert_pos>
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	8e 0f       	add	r24, r30
     a96:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <out_insert_pos>
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	ee 57       	subi	r30, 0x7E	; 126
     a9e:	fe 4f       	sbci	r31, 0xFE	; 254
     aa0:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     aa2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <bytes_in_out_buffer>
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     aac:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <out_insert_pos>
     ab0:	8f 3f       	cpi	r24, 0xFF	; 255
     ab2:	11 f4       	brne	.+4      	; 0xab8 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     ab4:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     ab8:	e1 ec       	ldi	r30, 0xC1	; 193
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	80 62       	ori	r24, 0x20	; 32
     ac0:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     ac2:	99 23       	and	r25, r25
     ac4:	39 f0       	breq	.+14     	; 0xad4 <uart_put_char+0x68>
		sei();
     ac6:	78 94       	sei
	}
	return 0;
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	05 c0       	rjmp	.+10     	; 0xad8 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
}
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
     adc:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <bytes_in_input_buffer>
     ae0:	88 23       	and	r24, r24
     ae2:	e1 f3       	breq	.-8      	; 0xadc <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     ae4:	2f b7       	in	r18, 0x3f	; 63
     ae6:	20 78       	andi	r18, 0x80	; 128
	cli();
     ae8:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
     aea:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <input_insert_pos>
     aee:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <bytes_in_input_buffer>
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	83 1b       	sub	r24, r19
     af6:	91 09       	sbc	r25, r1
     af8:	5a f4       	brpl	.+22     	; 0xb10 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     afa:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <input_insert_pos>
     afe:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	e8 1b       	sub	r30, r24
     b06:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
     b08:	ee 56       	subi	r30, 0x6E	; 110
     b0a:	fd 4f       	sbci	r31, 0xFD	; 253
     b0c:	80 81       	ld	r24, Z
     b0e:	0a c0       	rjmp	.+20     	; 0xb24 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     b10:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <input_insert_pos>
     b14:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <bytes_in_input_buffer>
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	e8 1b       	sub	r30, r24
     b1c:	f1 09       	sbc	r31, r1
     b1e:	ee 57       	subi	r30, 0x7E	; 126
     b20:	fd 4f       	sbci	r31, 0xFD	; 253
     b22:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
     b24:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <bytes_in_input_buffer>
     b28:	91 50       	subi	r25, 0x01	; 1
     b2a:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <bytes_in_input_buffer>
	if(interrupts_enabled) {
     b2e:	22 23       	and	r18, r18
     b30:	09 f0       	breq	.+2      	; 0xb34 <uart_get_char+0x58>
		sei();
     b32:	78 94       	sei
	}	
	return c;
}
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	08 95       	ret

00000b38 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
     b38:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <out_insert_pos>
	bytes_in_out_buffer = 0;
     b3c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <bytes_in_out_buffer>
	input_insert_pos = 0;
     b40:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <input_insert_pos>
	bytes_in_input_buffer = 0;
     b44:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <bytes_in_input_buffer>
	input_overrun = 0;
     b48:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
     b4c:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
     b50:	dc 01       	movw	r26, r24
     b52:	cb 01       	movw	r24, r22
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	aa 1f       	adc	r26, r26
     b5a:	bb 1f       	adc	r27, r27
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	aa 1f       	adc	r26, r26
     b62:	bb 1f       	adc	r27, r27
     b64:	9c 01       	movw	r18, r24
     b66:	ad 01       	movw	r20, r26
     b68:	22 0f       	add	r18, r18
     b6a:	33 1f       	adc	r19, r19
     b6c:	44 1f       	adc	r20, r20
     b6e:	55 1f       	adc	r21, r21
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	72 e1       	ldi	r23, 0x12	; 18
     b74:	8a e7       	ldi	r24, 0x7A	; 122
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 bc 08 	call	0x1178	; 0x1178 <__divmodsi4>
     b7c:	ba 01       	movw	r22, r20
     b7e:	a9 01       	movw	r20, r18
     b80:	4f 5f       	subi	r20, 0xFF	; 255
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	6f 4f       	sbci	r22, 0xFF	; 255
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	db 01       	movw	r26, r22
     b8a:	ca 01       	movw	r24, r20
     b8c:	1a f4       	brpl	.+6      	; 0xb94 <init_serial_stdio+0x5c>
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	a1 1d       	adc	r26, r1
     b92:	b1 1d       	adc	r27, r1
     b94:	b5 95       	asr	r27
     b96:	a7 95       	ror	r26
     b98:	97 95       	ror	r25
     b9a:	87 95       	ror	r24
     b9c:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
     b9e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     ba2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     ba6:	e1 ec       	ldi	r30, 0xC1	; 193
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	88 e1       	ldi	r24, 0x18	; 24
     bac:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
     bae:	80 81       	ld	r24, Z
     bb0:	80 68       	ori	r24, 0x80	; 128
     bb2:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
     bb4:	e4 e9       	ldi	r30, 0x94	; 148
     bb6:	f2 e0       	ldi	r31, 0x02	; 2
     bb8:	85 e0       	ldi	r24, 0x05	; 5
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	93 83       	std	Z+3, r25	; 0x03
     bbe:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
     bc0:	91 83       	std	Z+1, r25	; 0x01
     bc2:	80 83       	st	Z, r24
     bc4:	08 95       	ret

00000bc6 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
     bc6:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <bytes_in_input_buffer>
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	91 11       	cpse	r25, r1
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <serial_input_available+0xc>
     bd0:	80 e0       	ldi	r24, 0x00	; 0
}
     bd2:	08 95       	ret

00000bd4 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
     bd4:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <input_insert_pos>
	bytes_in_input_buffer = 0;
     bd8:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <bytes_in_input_buffer>
     bdc:	08 95       	ret

00000bde <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
     bde:	1f 92       	push	r1
     be0:	0f 92       	push	r0
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	0f 92       	push	r0
     be6:	11 24       	eor	r1, r1
     be8:	2f 93       	push	r18
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
     bf2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <bytes_in_out_buffer>
     bf6:	88 23       	and	r24, r24
     bf8:	29 f1       	breq	.+74     	; 0xc44 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
     bfa:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <out_insert_pos>
     bfe:	20 91 81 01 	lds	r18, 0x0181	; 0x800181 <bytes_in_out_buffer>
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	82 1b       	sub	r24, r18
     c06:	91 09       	sbc	r25, r1
     c08:	5a f4       	brpl	.+22     	; 0xc20 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     c0a:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <out_insert_pos>
     c0e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	e8 1b       	sub	r30, r24
     c16:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
     c18:	ef 57       	subi	r30, 0x7F	; 127
     c1a:	fd 4f       	sbci	r31, 0xFD	; 253
     c1c:	90 81       	ld	r25, Z
     c1e:	0a c0       	rjmp	.+20     	; 0xc34 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     c20:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <out_insert_pos>
     c24:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <bytes_in_out_buffer>
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	e8 1b       	sub	r30, r24
     c2c:	f1 09       	sbc	r31, r1
     c2e:	ee 57       	subi	r30, 0x7E	; 126
     c30:	fe 4f       	sbci	r31, 0xFE	; 254
     c32:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
     c34:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <bytes_in_out_buffer>
     c38:	81 50       	subi	r24, 0x01	; 1
     c3a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
     c3e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
     c44:	e1 ec       	ldi	r30, 0xC1	; 193
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	8f 7d       	andi	r24, 0xDF	; 223
     c4c:	80 83       	st	Z, r24
	}
}
     c4e:	ff 91       	pop	r31
     c50:	ef 91       	pop	r30
     c52:	9f 91       	pop	r25
     c54:	8f 91       	pop	r24
     c56:	2f 91       	pop	r18
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
     c62:	1f 92       	push	r1
     c64:	0f 92       	push	r0
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	0f 92       	push	r0
     c6a:	11 24       	eor	r1, r1
     c6c:	2f 93       	push	r18
     c6e:	3f 93       	push	r19
     c70:	4f 93       	push	r20
     c72:	5f 93       	push	r21
     c74:	6f 93       	push	r22
     c76:	7f 93       	push	r23
     c78:	8f 93       	push	r24
     c7a:	9f 93       	push	r25
     c7c:	af 93       	push	r26
     c7e:	bf 93       	push	r27
     c80:	cf 93       	push	r28
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
     c86:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
     c8a:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <do_echo>
     c8e:	88 23       	and	r24, r24
     c90:	49 f0       	breq	.+18     	; 0xca4 <__vector_20+0x42>
     c92:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <bytes_in_out_buffer>
     c96:	8f 3f       	cpi	r24, 0xFF	; 255
     c98:	29 f0       	breq	.+10     	; 0xca4 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	70 e0       	ldi	r23, 0x00	; 0
     c9e:	8c 2f       	mov	r24, r28
     ca0:	0e 94 36 05 	call	0xa6c	; 0xa6c <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
     ca4:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <bytes_in_input_buffer>
     ca8:	80 31       	cpi	r24, 0x10	; 16
     caa:	20 f0       	brcs	.+8      	; 0xcb4 <__vector_20+0x52>
		input_overrun = 1;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <input_overrun>
     cb2:	18 c0       	rjmp	.+48     	; 0xce4 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
     cb4:	cd 30       	cpi	r28, 0x0D	; 13
     cb6:	09 f4       	brne	.+2      	; 0xcba <__vector_20+0x58>
			c = '\n';
     cb8:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
     cba:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <input_insert_pos>
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	8e 0f       	add	r24, r30
     cc2:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <input_insert_pos>
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	ee 57       	subi	r30, 0x7E	; 126
     cca:	fd 4f       	sbci	r31, 0xFD	; 253
     ccc:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     cce:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <bytes_in_input_buffer>
     cd2:	8f 5f       	subi	r24, 0xFF	; 255
     cd4:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
     cd8:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <input_insert_pos>
     cdc:	80 31       	cpi	r24, 0x10	; 16
     cde:	11 f4       	brne	.+4      	; 0xce4 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
     ce0:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <input_insert_pos>
		}
	}
}
     ce4:	ff 91       	pop	r31
     ce6:	ef 91       	pop	r30
     ce8:	cf 91       	pop	r28
     cea:	bf 91       	pop	r27
     cec:	af 91       	pop	r26
     cee:	9f 91       	pop	r25
     cf0:	8f 91       	pop	r24
     cf2:	7f 91       	pop	r23
     cf4:	6f 91       	pop	r22
     cf6:	5f 91       	pop	r21
     cf8:	4f 91       	pop	r20
     cfa:	3f 91       	pop	r19
     cfc:	2f 91       	pop	r18
     cfe:	0f 90       	pop	r0
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	0f 90       	pop	r0
     d04:	1f 90       	pop	r1
     d06:	18 95       	reti

00000d08 <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <snakeLength>
	snakeTailIndex = 0;
     d14:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <snakeTailIndex>
	snakeHeadIndex = 1;
     d18:	c1 e0       	ldi	r28, 0x01	; 1
     d1a:	c0 93 4f 01 	sts	0x014F, r28	; 0x80014f <snakeHeadIndex>
	snakePositions[0] = position(1,1);
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	0e 94 f6 02 	call	0x5ec	; 0x5ec <position>
     d26:	01 e5       	ldi	r16, 0x51	; 81
     d28:	11 e0       	ldi	r17, 0x01	; 1
     d2a:	f8 01       	movw	r30, r16
     d2c:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 f6 02 	call	0x5ec	; 0x5ec <position>
     d36:	f8 01       	movw	r30, r16
     d38:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
     d3a:	c0 93 4d 01 	sts	0x014D, r28	; 0x80014d <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
     d3e:	c0 93 4c 01 	sts	0x014C, r28	; 0x80014c <nextSnakeDirn>
}
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	08 95       	ret

00000d4a <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
     d4a:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <snakeHeadIndex>
     d4e:	0e 2e       	mov	r0, r30
     d50:	00 0c       	add	r0, r0
     d52:	ff 0b       	sbc	r31, r31
     d54:	ef 5a       	subi	r30, 0xAF	; 175
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
}
     d58:	80 81       	ld	r24, Z
     d5a:	08 95       	ret

00000d5c <get_snake_tail_position>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
     d5c:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <snakeTailIndex>
     d60:	0e 2e       	mov	r0, r30
     d62:	00 0c       	add	r0, r0
     d64:	ff 0b       	sbc	r31, r31
     d66:	ef 5a       	subi	r30, 0xAF	; 175
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
}
     d6a:	80 81       	ld	r24, Z
     d6c:	08 95       	ret

00000d6e <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
     d6e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <snakeLength>
     d72:	08 95       	ret

00000d74 <advance_snake_head>:
** - ATE_FOOD if there was food at the new head position and the snake can grow
** - ATE_FOOD_BUT_CANT_GROW if there was food at the new head position but the
**   snake can't grow.
** (Only the last three of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
     d7a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <snakeLength>
     d7e:	81 32       	cpi	r24, 0x21	; 33
     d80:	08 f0       	brcs	.+2      	; 0xd84 <advance_snake_head+0x10>
     d82:	a0 c0       	rjmp	.+320    	; 0xec4 <advance_snake_head+0x150>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
     d84:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <snakeHeadIndex>
     d88:	0e 2e       	mov	r0, r30
     d8a:	00 0c       	add	r0, r0
     d8c:	ff 0b       	sbc	r31, r31
     d8e:	ef 5a       	subi	r30, 0xAF	; 175
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	80 81       	ld	r24, Z
     d94:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <x_position>
     d98:	18 2f       	mov	r17, r24
     d9a:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
     d9c:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <snakeHeadIndex>
     da0:	0e 2e       	mov	r0, r30
     da2:	00 0c       	add	r0, r0
     da4:	ff 0b       	sbc	r31, r31
     da6:	ef 5a       	subi	r30, 0xAF	; 175
     da8:	fe 4f       	sbci	r31, 0xFE	; 254
     daa:	80 81       	ld	r24, Z
     dac:	0e 94 ee 02 	call	0x5dc	; 0x5dc <y_position>
     db0:	d8 2f       	mov	r29, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
     db2:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <nextSnakeDirn>
     db6:	91 30       	cpi	r25, 0x01	; 1
     db8:	a9 f0       	breq	.+42     	; 0xde4 <advance_snake_head+0x70>
     dba:	28 f0       	brcs	.+10     	; 0xdc6 <advance_snake_head+0x52>
     dbc:	92 30       	cpi	r25, 0x02	; 2
     dbe:	81 f1       	breq	.+96     	; 0xe20 <advance_snake_head+0xac>
     dc0:	93 30       	cpi	r25, 0x03	; 3
     dc2:	f9 f0       	breq	.+62     	; 0xe02 <advance_snake_head+0x8e>
     dc4:	3b c0       	rjmp	.+118    	; 0xe3c <advance_snake_head+0xc8>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
     dc6:	87 30       	cpi	r24, 0x07	; 7
     dc8:	31 f4       	brne	.+12     	; 0xdd6 <advance_snake_head+0x62>
				// Head is already at the top of the board - wrap around
				headY = 0;
				add_to_score(1);
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 50 04 	call	0x8a0	; 0x8a0 <add_to_score>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
     dd2:	d0 e0       	ldi	r29, 0x00	; 0
     dd4:	33 c0       	rjmp	.+102    	; 0xe3c <advance_snake_head+0xc8>
				add_to_score(1);
			} else {
	            headY += 1;
     dd6:	d1 e0       	ldi	r29, 0x01	; 1
     dd8:	d8 0f       	add	r29, r24
				add_to_score(1);
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 50 04 	call	0x8a0	; 0x8a0 <add_to_score>
     de2:	2c c0       	rjmp	.+88     	; 0xe3c <advance_snake_head+0xc8>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
     de4:	1f 30       	cpi	r17, 0x0F	; 15
     de6:	31 f4       	brne	.+12     	; 0xdf4 <advance_snake_head+0x80>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
				add_to_score(1);
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 50 04 	call	0x8a0	; 0x8a0 <add_to_score>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
     df0:	c0 e0       	ldi	r28, 0x00	; 0
     df2:	24 c0       	rjmp	.+72     	; 0xe3c <advance_snake_head+0xc8>
				add_to_score(1);
			} else {
				headX += 1;
     df4:	c1 e0       	ldi	r28, 0x01	; 1
     df6:	c1 0f       	add	r28, r17
				add_to_score(1);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <add_to_score>
     e00:	1d c0       	rjmp	.+58     	; 0xe3c <advance_snake_head+0xc8>
			}
            break;
		case SNAKE_LEFT:
			if(headX == 1) {
     e02:	11 30       	cpi	r17, 0x01	; 1
     e04:	31 f4       	brne	.+12     	; 0xe12 <advance_snake_head+0x9e>
				// Snake head is already at the left hand edge of the board
				// - wrap around to the right hand edge of the board
				headX = BOARD_WIDTH;
				add_to_score(1);
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <add_to_score>
            break;
		case SNAKE_LEFT:
			if(headX == 1) {
				// Snake head is already at the left hand edge of the board
				// - wrap around to the right hand edge of the board
				headX = BOARD_WIDTH;
     e0e:	c0 e1       	ldi	r28, 0x10	; 16
     e10:	15 c0       	rjmp	.+42     	; 0xe3c <advance_snake_head+0xc8>
				add_to_score(1);
			} else {
				headX -= 1;
     e12:	cf ef       	ldi	r28, 0xFF	; 255
     e14:	c1 0f       	add	r28, r17
				add_to_score(1);
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <add_to_score>
     e1e:	0e c0       	rjmp	.+28     	; 0xe3c <advance_snake_head+0xc8>
			}
			break;
		case SNAKE_DOWN:
		// Snake head is already at the bottom hand edge of the board
		// - wrap around to the top
		if(headY == 1){
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	31 f4       	brne	.+12     	; 0xe30 <advance_snake_head+0xbc>
			headY = BOARD_HEIGHT;
			add_to_score(1);
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 50 04 	call	0x8a0	; 0x8a0 <add_to_score>
			break;
		case SNAKE_DOWN:
		// Snake head is already at the bottom hand edge of the board
		// - wrap around to the top
		if(headY == 1){
			headY = BOARD_HEIGHT;
     e2c:	d8 e0       	ldi	r29, 0x08	; 8
     e2e:	06 c0       	rjmp	.+12     	; 0xe3c <advance_snake_head+0xc8>
			add_to_score(1);
		} else {
			headY -= 1;
     e30:	df ef       	ldi	r29, 0xFF	; 255
     e32:	d8 0f       	add	r29, r24
			add_to_score(1);
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 50 04 	call	0x8a0	; 0x8a0 <add_to_score>
			break;
		}
    }

	newHeadPosn = position(headX, headY);
     e3c:	6d 2f       	mov	r22, r29
     e3e:	8c 2f       	mov	r24, r28
     e40:	0e 94 f6 02 	call	0x5ec	; 0x5ec <position>

	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
     e44:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <nextSnakeDirn>
     e48:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <curSnakeDirn>
	** is already occupied by the snake, and if so, return
	** COLLISION. Do not continue. See snake.h for a function 
	** which can help you.
	*/
	// Initialize index i, at the tail
	int i = snakeTailIndex;
     e4c:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <snakeTailIndex>
     e50:	04 2e       	mov	r0, r20
     e52:	00 0c       	add	r0, r0
     e54:	55 0b       	sbc	r21, r21
	/*Loop through positions of the snake's body (from tail to neck) to see if the head and
	**body share positions - if they do return COLLISION
	*/
		while(i != snakeHeadIndex) {
     e56:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <snakeHeadIndex>
     e5a:	63 2f       	mov	r22, r19
     e5c:	03 2e       	mov	r0, r19
     e5e:	00 0c       	add	r0, r0
     e60:	77 0b       	sbc	r23, r23
			if(snakePositions[snakeHeadIndex] == snakePositions[i]) {
     e62:	db 01       	movw	r26, r22
     e64:	af 5a       	subi	r26, 0xAF	; 175
     e66:	be 4f       	sbci	r27, 0xFE	; 254
     e68:	fa 01       	movw	r30, r20
     e6a:	ef 5a       	subi	r30, 0xAF	; 175
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
	// Initialize index i, at the tail
	int i = snakeTailIndex;
	/*Loop through positions of the snake's body (from tail to neck) to see if the head and
	**body share positions - if they do return COLLISION
	*/
		while(i != snakeHeadIndex) {
     e6e:	04 c0       	rjmp	.+8      	; 0xe78 <advance_snake_head+0x104>
			if(snakePositions[snakeHeadIndex] == snakePositions[i]) {
     e70:	2c 91       	ld	r18, X
     e72:	90 81       	ld	r25, Z
     e74:	29 17       	cp	r18, r25
     e76:	41 f1       	breq	.+80     	; 0xec8 <advance_snake_head+0x154>
	// Initialize index i, at the tail
	int i = snakeTailIndex;
	/*Loop through positions of the snake's body (from tail to neck) to see if the head and
	**body share positions - if they do return COLLISION
	*/
		while(i != snakeHeadIndex) {
     e78:	46 17       	cp	r20, r22
     e7a:	57 07       	cpc	r21, r23
     e7c:	c9 f7       	brne	.-14     	; 0xe70 <advance_snake_head+0xfc>
    ** Advance head by 1. First work out the index
	** of the new head position in the array of snake positions.
	** and whether this has wrapped around in our array of positions
	** or not. Update the length.
    */
	snakeHeadIndex++;
     e7e:	3f 5f       	subi	r19, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
     e80:	31 32       	cpi	r19, 0x21	; 33
     e82:	19 f0       	breq	.+6      	; 0xe8a <advance_snake_head+0x116>
    ** Advance head by 1. First work out the index
	** of the new head position in the array of snake positions.
	** and whether this has wrapped around in our array of positions
	** or not. Update the length.
    */
	snakeHeadIndex++;
     e84:	30 93 4f 01 	sts	0x014F, r19	; 0x80014f <snakeHeadIndex>
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <advance_snake_head+0x11a>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
     e8a:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
     e8e:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <snakeHeadIndex>
     e92:	0e 2e       	mov	r0, r30
     e94:	00 0c       	add	r0, r0
     e96:	ff 0b       	sbc	r31, r31
     e98:	ef 5a       	subi	r30, 0xAF	; 175
     e9a:	fe 4f       	sbci	r31, 0xFE	; 254
     e9c:	80 83       	st	Z, r24
	/* Update the snake's length */
	snakeLength++;
     e9e:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <snakeLength>
     ea2:	9f 5f       	subi	r25, 0xFF	; 255
     ea4:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_food_at(newHeadPosn)) {
     ea8:	0e 94 b4 01 	call	0x368	; 0x368 <is_food_at>
     eac:	88 23       	and	r24, r24
     eae:	71 f0       	breq	.+28     	; 0xecc <advance_snake_head+0x158>
		if(snakeLength <= MAX_SNAKE_SIZE) {
     eb0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <snakeLength>
     eb4:	81 32       	cpi	r24, 0x21	; 33
     eb6:	60 f4       	brcc	.+24     	; 0xed0 <advance_snake_head+0x15c>
			add_to_score(4);
     eb8:	84 e0       	ldi	r24, 0x04	; 4
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 50 04 	call	0x8a0	; 0x8a0 <add_to_score>
			return ATE_FOOD;
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <advance_snake_head+0x15e>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
     ec4:	8d ef       	ldi	r24, 0xFD	; 253
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <advance_snake_head+0x15e>
	/*Loop through positions of the snake's body (from tail to neck) to see if the head and
	**body share positions - if they do return COLLISION
	*/
		while(i != snakeHeadIndex) {
			if(snakePositions[snakeHeadIndex] == snakePositions[i]) {
				return COLLISION;
     ec8:	8e ef       	ldi	r24, 0xFE	; 254
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <advance_snake_head+0x15e>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <advance_snake_head+0x15e>
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			add_to_score(4);
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
     ed0:	83 e0       	ldi	r24, 0x03	; 3
		}
	} else {
		return MOVE_OK;
	}
}
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
     eda:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <snakeTailIndex>
     ede:	e9 2f       	mov	r30, r25
     ee0:	09 2e       	mov	r0, r25
     ee2:	00 0c       	add	r0, r0
     ee4:	ff 0b       	sbc	r31, r31
     ee6:	ef 5a       	subi	r30, 0xAF	; 175
     ee8:	fe 4f       	sbci	r31, 0xFE	; 254
     eea:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
     eec:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
     eee:	91 32       	cpi	r25, 0x21	; 33
     ef0:	19 f0       	breq	.+6      	; 0xef8 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
     ef2:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <snakeTailIndex>
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
     ef8:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <snakeTailIndex>
	}
	snakeLength--;
     efc:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <snakeLength>
     f00:	91 50       	subi	r25, 0x01	; 1
     f02:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <snakeLength>
	
	return prev_tail_position;
}
     f06:	08 95       	ret

00000f08 <set_snake_dirn>:
	** If the direction is OK, set the next direction (stored in nextSnakeDirn)
	**
	** Initially was assumed the move is OK and just set the 
	** next direction.
	*/
    switch (curSnakeDirn) {
     f08:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <curSnakeDirn>
     f0c:	91 30       	cpi	r25, 0x01	; 1
     f0e:	89 f0       	breq	.+34     	; 0xf32 <set_snake_dirn+0x2a>
     f10:	a8 f0       	brcs	.+42     	; 0xf3c <set_snake_dirn+0x34>
     f12:	92 30       	cpi	r25, 0x02	; 2
     f14:	19 f0       	breq	.+6      	; 0xf1c <set_snake_dirn+0x14>
     f16:	93 30       	cpi	r25, 0x03	; 3
     f18:	39 f0       	breq	.+14     	; 0xf28 <set_snake_dirn+0x20>
     f1a:	15 c0       	rjmp	.+42     	; 0xf46 <set_snake_dirn+0x3e>
		case SNAKE_DOWN:
		if (dirn == SNAKE_UP) {
     f1c:	81 11       	cpse	r24, r1
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <set_snake_dirn+0x20>
			// snake currently going down, we prevent it from going up
			// by setting the next direction to the current direction
			nextSnakeDirn = curSnakeDirn;
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <nextSnakeDirn>
			return;
     f26:	08 95       	ret
		}
		case SNAKE_LEFT:
		if (dirn == SNAKE_RIGHT) {
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	19 f4       	brne	.+6      	; 0xf32 <set_snake_dirn+0x2a>
			// snake currently going left, we prevent it from going right
			// by setting the next direction to the current direction
			nextSnakeDirn = curSnakeDirn;
     f2c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <nextSnakeDirn>
			return;
     f30:	08 95       	ret
		}
		case SNAKE_RIGHT:
		if (dirn == SNAKE_LEFT) {
     f32:	83 30       	cpi	r24, 0x03	; 3
     f34:	19 f4       	brne	.+6      	; 0xf3c <set_snake_dirn+0x34>
			// snake currently going right, we prevent it from going left
			// by setting the next direction to the current direction
			nextSnakeDirn = curSnakeDirn;
     f36:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <nextSnakeDirn>
			return;
     f3a:	08 95       	ret
		}
		case SNAKE_UP:
		if (dirn == SNAKE_DOWN) {
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	19 f4       	brne	.+6      	; 0xf46 <set_snake_dirn+0x3e>
			// snake currently going up, we prevent it from going down
			// by setting the next direction to the current direction
			nextSnakeDirn = curSnakeDirn;
     f40:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <nextSnakeDirn>
			return;
     f44:	08 95       	ret
		}
    }

	// otherwise the move is OK (no 'return' so far)
	// we just set the new direction
	nextSnakeDirn = dirn;
     f46:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <nextSnakeDirn>
     f4a:	08 95       	ret

00000f4c <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
     f4c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <snakeTailIndex>
	while(index != snakeHeadIndex) {
     f50:	30 91 4f 01 	lds	r19, 0x014F	; 0x80014f <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
     f54:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
     f56:	0d c0       	rjmp	.+26     	; 0xf72 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
     f58:	e9 2f       	mov	r30, r25
     f5a:	09 2e       	mov	r0, r25
     f5c:	00 0c       	add	r0, r0
     f5e:	ff 0b       	sbc	r31, r31
     f60:	ef 5a       	subi	r30, 0xAF	; 175
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	20 81       	ld	r18, Z
     f66:	28 17       	cp	r18, r24
     f68:	89 f0       	breq	.+34     	; 0xf8c <is_snake_at+0x40>
     f6a:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
     f6c:	91 32       	cpi	r25, 0x21	; 33
     f6e:	0c f0       	brlt	.+2      	; 0xf72 <is_snake_at+0x26>
			index = 0;
     f70:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
     f72:	93 13       	cpse	r25, r19
     f74:	f1 cf       	rjmp	.-30     	; 0xf58 <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
     f76:	e3 2f       	mov	r30, r19
     f78:	33 0f       	add	r19, r19
     f7a:	ff 0b       	sbc	r31, r31
     f7c:	ef 5a       	subi	r30, 0xAF	; 175
     f7e:	fe 4f       	sbci	r31, 0xFE	; 254
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	20 81       	ld	r18, Z
     f84:	28 17       	cp	r18, r24
     f86:	19 f0       	breq	.+6      	; 0xf8e <is_snake_at+0x42>
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <is_snake_at+0x42>
     f8c:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
     f8e:	89 2f       	mov	r24, r25
     f90:	08 95       	ret

00000f92 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
     f92:	94 b1       	in	r25, 0x04	; 4
     f94:	90 6b       	ori	r25, 0xB0	; 176
     f96:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
     f98:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
     f9a:	90 e5       	ldi	r25, 0x50	; 80
     f9c:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
     f9e:	88 30       	cpi	r24, 0x08	; 8
     fa0:	21 f0       	breq	.+8      	; 0xfaa <spi_setup_master+0x18>
     fa2:	80 32       	cpi	r24, 0x20	; 32
     fa4:	11 f0       	breq	.+4      	; 0xfaa <spi_setup_master+0x18>
     fa6:	82 30       	cpi	r24, 0x02	; 2
     fa8:	19 f4       	brne	.+6      	; 0xfb0 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	9d bd       	out	0x2d, r25	; 45
			break;
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
     fb0:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
     fb2:	80 32       	cpi	r24, 0x20	; 32
     fb4:	69 f0       	breq	.+26     	; 0xfd0 <spi_setup_master+0x3e>
     fb6:	28 f4       	brcc	.+10     	; 0xfc2 <spi_setup_master+0x30>
     fb8:	88 30       	cpi	r24, 0x08	; 8
     fba:	71 f0       	breq	.+28     	; 0xfd8 <spi_setup_master+0x46>
     fbc:	80 31       	cpi	r24, 0x10	; 16
     fbe:	61 f0       	breq	.+24     	; 0xfd8 <spi_setup_master+0x46>
     fc0:	0e c0       	rjmp	.+28     	; 0xfde <spi_setup_master+0x4c>
     fc2:	80 34       	cpi	r24, 0x40	; 64
     fc4:	29 f0       	breq	.+10     	; 0xfd0 <spi_setup_master+0x3e>
     fc6:	80 38       	cpi	r24, 0x80	; 128
     fc8:	51 f4       	brne	.+20     	; 0xfde <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
     fca:	8c b5       	in	r24, 0x2c	; 44
     fcc:	81 60       	ori	r24, 0x01	; 1
     fce:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
     fd0:	8c b5       	in	r24, 0x2c	; 44
     fd2:	82 60       	ori	r24, 0x02	; 2
     fd4:	8c bd       	out	0x2c, r24	; 44
			break;
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
     fd8:	8c b5       	in	r24, 0x2c	; 44
     fda:	81 60       	ori	r24, 0x01	; 1
     fdc:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
     fde:	2c 98       	cbi	0x05, 4	; 5
     fe0:	08 95       	ret

00000fe2 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
     fe2:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
     fe4:	0d b4       	in	r0, 0x2d	; 45
     fe6:	07 fe       	sbrs	r0, 7
     fe8:	fd cf       	rjmp	.-6      	; 0xfe4 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
     fea:	8e b5       	in	r24, 0x2e	; 46
     fec:	08 95       	ret

00000fee <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
     fee:	28 2f       	mov	r18, r24
     ff0:	08 2e       	mov	r0, r24
     ff2:	00 0c       	add	r0, r0
     ff4:	33 0b       	sbc	r19, r19
     ff6:	3f 93       	push	r19
     ff8:	8f 93       	push	r24
     ffa:	86 2f       	mov	r24, r22
     ffc:	06 2e       	mov	r0, r22
     ffe:	00 0c       	add	r0, r0
    1000:	99 0b       	sbc	r25, r25
    1002:	9f 93       	push	r25
    1004:	6f 93       	push	r22
    1006:	87 ec       	ldi	r24, 0xC7	; 199
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	9f 93       	push	r25
    100c:	8f 93       	push	r24
    100e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <printf_P>
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	08 95       	ret

00001020 <clear_terminal>:
    1020:	82 ec       	ldi	r24, 0xC2	; 194
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	9f 93       	push	r25
    1026:	8f 93       	push	r24
    1028:	0e 94 dd 09 	call	0x13ba	; 0x13ba <printf_P>
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	08 95       	ret

00001032 <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    1032:	1f 92       	push	r1
    1034:	8f 93       	push	r24
    1036:	8c eb       	ldi	r24, 0xBC	; 188
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	9f 93       	push	r25
    103c:	8f 93       	push	r24
    103e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <printf_P>
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	08 95       	ret

0000104c <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    104c:	85 eb       	ldi	r24, 0xB5	; 181
    104e:	91 e0       	ldi	r25, 0x01	; 1
    1050:	9f 93       	push	r25
    1052:	8f 93       	push	r24
    1054:	0e 94 dd 09 	call	0x13ba	; 0x13ba <printf_P>
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	08 95       	ret

0000105e <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    105e:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <clock_ticks>
    1062:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <clock_ticks+0x1>
    1066:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <clock_ticks+0x2>
    106a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    106e:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1070:	8c e7       	ldi	r24, 0x7C	; 124
    1072:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    107c:	ee e6       	ldi	r30, 0x6E	; 110
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	82 60       	ori	r24, 0x02	; 2
    1084:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    1086:	85 b3       	in	r24, 0x15	; 21
    1088:	82 70       	andi	r24, 0x02	; 2
    108a:	85 bb       	out	0x15, r24	; 21
	
	// Setting things related to snake length display
	/* Set all the bits of PORTA to be outputs, because
	 * that's on PORTA that the SSD is connected
	 */
	DDRA = 0xFF;
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	81 b9       	out	0x01, r24	; 1
	// Set pin 0 in PORTC to be an output
	DDRC = (1<<DDRC0);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	87 b9       	out	0x07, r24	; 7
	//starting with the 'right' number on the seven seg display
	digit = 0; 
    1094:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <digit>
    1098:	08 95       	ret

0000109a <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    109a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    109c:	f8 94       	cli
	return_value = clock_ticks;
    109e:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <clock_ticks>
    10a2:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <clock_ticks+0x1>
    10a6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <clock_ticks+0x2>
    10aa:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <clock_ticks+0x3>
	if(interrupts_were_on) {
    10ae:	22 23       	and	r18, r18
    10b0:	0c f4       	brge	.+2      	; 0x10b4 <get_clock_ticks+0x1a>
		sei();
    10b2:	78 94       	sei
	}
	return return_value;
}
    10b4:	08 95       	ret

000010b6 <display_length>:

/* display_digit gets called every time the timer compare interrupt occurs.
 * every time it gets called, the digit displayed is changed
 */
void display_length(uint8_t snakeLength, uint8_t digit) {
	if(digit == 0) {
    10b6:	61 11       	cpse	r22, r1
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <display_length+0x2c>
		//Right side of display
		PORTA = seven_seg[snakeLength % 10];
    10ba:	9d ec       	ldi	r25, 0xCD	; 205
    10bc:	89 9f       	mul	r24, r25
    10be:	91 2d       	mov	r25, r1
    10c0:	11 24       	eor	r1, r1
    10c2:	96 95       	lsr	r25
    10c4:	96 95       	lsr	r25
    10c6:	96 95       	lsr	r25
    10c8:	99 0f       	add	r25, r25
    10ca:	29 2f       	mov	r18, r25
    10cc:	22 0f       	add	r18, r18
    10ce:	22 0f       	add	r18, r18
    10d0:	92 0f       	add	r25, r18
    10d2:	89 1b       	sub	r24, r25
    10d4:	e8 2f       	mov	r30, r24
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	ed 5e       	subi	r30, 0xED	; 237
    10da:	fe 4f       	sbci	r31, 0xFE	; 254
    10dc:	80 81       	ld	r24, Z
    10de:	82 b9       	out	0x02, r24	; 2
    10e0:	08 95       	ret
		// it will be the left number displayed
		digit = digit + 1;
	}
	else {
		//Left side of the display
		PORTA = seven_seg[snakeLength / 10];
    10e2:	ed ec       	ldi	r30, 0xCD	; 205
    10e4:	8e 9f       	mul	r24, r30
    10e6:	e1 2d       	mov	r30, r1
    10e8:	11 24       	eor	r1, r1
    10ea:	e6 95       	lsr	r30
    10ec:	e6 95       	lsr	r30
    10ee:	e6 95       	lsr	r30
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	ed 5e       	subi	r30, 0xED	; 237
    10f4:	fe 4f       	sbci	r31, 0xFE	; 254
    10f6:	80 81       	ld	r24, Z
    10f8:	82 b9       	out	0x02, r24	; 2
    10fa:	08 95       	ret

000010fc <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (i.e 124: every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    10fc:	1f 92       	push	r1
    10fe:	0f 92       	push	r0
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	0f 92       	push	r0
    1104:	11 24       	eor	r1, r1
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	cf 93       	push	r28
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
	/* Increment our clock tick count */
	clock_ticks++;
    1120:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <clock_ticks>
    1124:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <clock_ticks+0x1>
    1128:	a0 91 75 01 	lds	r26, 0x0175	; 0x800175 <clock_ticks+0x2>
    112c:	b0 91 76 01 	lds	r27, 0x0176	; 0x800176 <clock_ticks+0x3>
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	a1 1d       	adc	r26, r1
    1134:	b1 1d       	adc	r27, r1
    1136:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <clock_ticks>
    113a:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <clock_ticks+0x1>
    113e:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <clock_ticks+0x2>
    1142:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <clock_ticks+0x3>
	//toggle the CC pin to display the Snake length
	display_length(get_snake_length(), digit);
    1146:	c0 91 72 01 	lds	r28, 0x0172	; 0x800172 <digit>
    114a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <get_snake_length>
    114e:	6c 2f       	mov	r22, r28
    1150:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <display_length>
}
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	cf 91       	pop	r28
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <__divmodsi4>:
    1178:	05 2e       	mov	r0, r21
    117a:	97 fb       	bst	r25, 7
    117c:	1e f4       	brtc	.+6      	; 0x1184 <__divmodsi4+0xc>
    117e:	00 94       	com	r0
    1180:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__negsi2>
    1184:	57 fd       	sbrc	r21, 7
    1186:	07 d0       	rcall	.+14     	; 0x1196 <__divmodsi4_neg2>
    1188:	0e 94 db 08 	call	0x11b6	; 0x11b6 <__udivmodsi4>
    118c:	07 fc       	sbrc	r0, 7
    118e:	03 d0       	rcall	.+6      	; 0x1196 <__divmodsi4_neg2>
    1190:	4e f4       	brtc	.+18     	; 0x11a4 <__divmodsi4_exit>
    1192:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__negsi2>

00001196 <__divmodsi4_neg2>:
    1196:	50 95       	com	r21
    1198:	40 95       	com	r20
    119a:	30 95       	com	r19
    119c:	21 95       	neg	r18
    119e:	3f 4f       	sbci	r19, 0xFF	; 255
    11a0:	4f 4f       	sbci	r20, 0xFF	; 255
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255

000011a4 <__divmodsi4_exit>:
    11a4:	08 95       	ret

000011a6 <__negsi2>:
    11a6:	90 95       	com	r25
    11a8:	80 95       	com	r24
    11aa:	70 95       	com	r23
    11ac:	61 95       	neg	r22
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	8f 4f       	sbci	r24, 0xFF	; 255
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	08 95       	ret

000011b6 <__udivmodsi4>:
    11b6:	a1 e2       	ldi	r26, 0x21	; 33
    11b8:	1a 2e       	mov	r1, r26
    11ba:	aa 1b       	sub	r26, r26
    11bc:	bb 1b       	sub	r27, r27
    11be:	fd 01       	movw	r30, r26
    11c0:	0d c0       	rjmp	.+26     	; 0x11dc <__udivmodsi4_ep>

000011c2 <__udivmodsi4_loop>:
    11c2:	aa 1f       	adc	r26, r26
    11c4:	bb 1f       	adc	r27, r27
    11c6:	ee 1f       	adc	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	a2 17       	cp	r26, r18
    11cc:	b3 07       	cpc	r27, r19
    11ce:	e4 07       	cpc	r30, r20
    11d0:	f5 07       	cpc	r31, r21
    11d2:	20 f0       	brcs	.+8      	; 0x11dc <__udivmodsi4_ep>
    11d4:	a2 1b       	sub	r26, r18
    11d6:	b3 0b       	sbc	r27, r19
    11d8:	e4 0b       	sbc	r30, r20
    11da:	f5 0b       	sbc	r31, r21

000011dc <__udivmodsi4_ep>:
    11dc:	66 1f       	adc	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	1a 94       	dec	r1
    11e6:	69 f7       	brne	.-38     	; 0x11c2 <__udivmodsi4_loop>
    11e8:	60 95       	com	r22
    11ea:	70 95       	com	r23
    11ec:	80 95       	com	r24
    11ee:	90 95       	com	r25
    11f0:	9b 01       	movw	r18, r22
    11f2:	ac 01       	movw	r20, r24
    11f4:	bd 01       	movw	r22, r26
    11f6:	cf 01       	movw	r24, r30
    11f8:	08 95       	ret

000011fa <random_r>:
    11fa:	8f 92       	push	r8
    11fc:	9f 92       	push	r9
    11fe:	af 92       	push	r10
    1200:	bf 92       	push	r11
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	ec 01       	movw	r28, r24
    1210:	68 81       	ld	r22, Y
    1212:	79 81       	ldd	r23, Y+1	; 0x01
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	9b 81       	ldd	r25, Y+3	; 0x03
    1218:	61 15       	cp	r22, r1
    121a:	71 05       	cpc	r23, r1
    121c:	81 05       	cpc	r24, r1
    121e:	91 05       	cpc	r25, r1
    1220:	21 f4       	brne	.+8      	; 0x122a <random_r+0x30>
    1222:	64 e2       	ldi	r22, 0x24	; 36
    1224:	79 ed       	ldi	r23, 0xD9	; 217
    1226:	8b e5       	ldi	r24, 0x5B	; 91
    1228:	97 e0       	ldi	r25, 0x07	; 7
    122a:	2d e1       	ldi	r18, 0x1D	; 29
    122c:	33 ef       	ldi	r19, 0xF3	; 243
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	0e 94 bc 08 	call	0x1178	; 0x1178 <__divmodsi4>
    1236:	49 01       	movw	r8, r18
    1238:	5a 01       	movw	r10, r20
    123a:	9b 01       	movw	r18, r22
    123c:	ac 01       	movw	r20, r24
    123e:	a7 ea       	ldi	r26, 0xA7	; 167
    1240:	b1 e4       	ldi	r27, 0x41	; 65
    1242:	0e 94 94 0c 	call	0x1928	; 0x1928 <__muluhisi3>
    1246:	6b 01       	movw	r12, r22
    1248:	7c 01       	movw	r14, r24
    124a:	ac ee       	ldi	r26, 0xEC	; 236
    124c:	b4 ef       	ldi	r27, 0xF4	; 244
    124e:	a5 01       	movw	r20, r10
    1250:	94 01       	movw	r18, r8
    1252:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__mulohisi3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	8c 0d       	add	r24, r12
    125c:	9d 1d       	adc	r25, r13
    125e:	ae 1d       	adc	r26, r14
    1260:	bf 1d       	adc	r27, r15
    1262:	b7 ff       	sbrs	r27, 7
    1264:	03 c0       	rjmp	.+6      	; 0x126c <random_r+0x72>
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	a1 09       	sbc	r26, r1
    126a:	b0 48       	sbci	r27, 0x80	; 128
    126c:	88 83       	st	Y, r24
    126e:	99 83       	std	Y+1, r25	; 0x01
    1270:	aa 83       	std	Y+2, r26	; 0x02
    1272:	bb 83       	std	Y+3, r27	; 0x03
    1274:	bc 01       	movw	r22, r24
    1276:	cd 01       	movw	r24, r26
    1278:	9f 77       	andi	r25, 0x7F	; 127
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	ff 90       	pop	r15
    1280:	ef 90       	pop	r14
    1282:	df 90       	pop	r13
    1284:	cf 90       	pop	r12
    1286:	bf 90       	pop	r11
    1288:	af 90       	pop	r10
    128a:	9f 90       	pop	r9
    128c:	8f 90       	pop	r8
    128e:	08 95       	ret

00001290 <random>:
    1290:	8f 92       	push	r8
    1292:	9f 92       	push	r9
    1294:	af 92       	push	r10
    1296:	bf 92       	push	r11
    1298:	cf 92       	push	r12
    129a:	df 92       	push	r13
    129c:	ef 92       	push	r14
    129e:	ff 92       	push	r15
    12a0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    12a4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    12a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    12ac:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    12b0:	61 15       	cp	r22, r1
    12b2:	71 05       	cpc	r23, r1
    12b4:	81 05       	cpc	r24, r1
    12b6:	91 05       	cpc	r25, r1
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <random+0x32>
    12ba:	64 e2       	ldi	r22, 0x24	; 36
    12bc:	79 ed       	ldi	r23, 0xD9	; 217
    12be:	8b e5       	ldi	r24, 0x5B	; 91
    12c0:	97 e0       	ldi	r25, 0x07	; 7
    12c2:	2d e1       	ldi	r18, 0x1D	; 29
    12c4:	33 ef       	ldi	r19, 0xF3	; 243
    12c6:	41 e0       	ldi	r20, 0x01	; 1
    12c8:	50 e0       	ldi	r21, 0x00	; 0
    12ca:	0e 94 bc 08 	call	0x1178	; 0x1178 <__divmodsi4>
    12ce:	49 01       	movw	r8, r18
    12d0:	5a 01       	movw	r10, r20
    12d2:	9b 01       	movw	r18, r22
    12d4:	ac 01       	movw	r20, r24
    12d6:	a7 ea       	ldi	r26, 0xA7	; 167
    12d8:	b1 e4       	ldi	r27, 0x41	; 65
    12da:	0e 94 94 0c 	call	0x1928	; 0x1928 <__muluhisi3>
    12de:	6b 01       	movw	r12, r22
    12e0:	7c 01       	movw	r14, r24
    12e2:	ac ee       	ldi	r26, 0xEC	; 236
    12e4:	b4 ef       	ldi	r27, 0xF4	; 244
    12e6:	a5 01       	movw	r20, r10
    12e8:	94 01       	movw	r18, r8
    12ea:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__mulohisi3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	8c 0d       	add	r24, r12
    12f4:	9d 1d       	adc	r25, r13
    12f6:	ae 1d       	adc	r26, r14
    12f8:	bf 1d       	adc	r27, r15
    12fa:	b7 ff       	sbrs	r27, 7
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <random+0x74>
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	a1 09       	sbc	r26, r1
    1302:	b0 48       	sbci	r27, 0x80	; 128
    1304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1308:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    130c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1310:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1314:	bc 01       	movw	r22, r24
    1316:	cd 01       	movw	r24, r26
    1318:	9f 77       	andi	r25, 0x7F	; 127
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	cf 90       	pop	r12
    1322:	bf 90       	pop	r11
    1324:	af 90       	pop	r10
    1326:	9f 90       	pop	r9
    1328:	8f 90       	pop	r8
    132a:	08 95       	ret

0000132c <srandom>:
    132c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    1330:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1334:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1338:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    133c:	08 95       	ret

0000133e <fgetc>:
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	ec 01       	movw	r28, r24
    1344:	2b 81       	ldd	r18, Y+3	; 0x03
    1346:	20 ff       	sbrs	r18, 0
    1348:	33 c0       	rjmp	.+102    	; 0x13b0 <fgetc+0x72>
    134a:	26 ff       	sbrs	r18, 6
    134c:	0a c0       	rjmp	.+20     	; 0x1362 <fgetc+0x24>
    134e:	2f 7b       	andi	r18, 0xBF	; 191
    1350:	2b 83       	std	Y+3, r18	; 0x03
    1352:	8e 81       	ldd	r24, Y+6	; 0x06
    1354:	9f 81       	ldd	r25, Y+7	; 0x07
    1356:	01 96       	adiw	r24, 0x01	; 1
    1358:	9f 83       	std	Y+7, r25	; 0x07
    135a:	8e 83       	std	Y+6, r24	; 0x06
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	29 c0       	rjmp	.+82     	; 0x13b4 <fgetc+0x76>
    1362:	22 ff       	sbrs	r18, 2
    1364:	0f c0       	rjmp	.+30     	; 0x1384 <fgetc+0x46>
    1366:	e8 81       	ld	r30, Y
    1368:	f9 81       	ldd	r31, Y+1	; 0x01
    136a:	80 81       	ld	r24, Z
    136c:	08 2e       	mov	r0, r24
    136e:	00 0c       	add	r0, r0
    1370:	99 0b       	sbc	r25, r25
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	19 f4       	brne	.+6      	; 0x137c <fgetc+0x3e>
    1376:	20 62       	ori	r18, 0x20	; 32
    1378:	2b 83       	std	Y+3, r18	; 0x03
    137a:	1a c0       	rjmp	.+52     	; 0x13b0 <fgetc+0x72>
    137c:	31 96       	adiw	r30, 0x01	; 1
    137e:	f9 83       	std	Y+1, r31	; 0x01
    1380:	e8 83       	st	Y, r30
    1382:	0e c0       	rjmp	.+28     	; 0x13a0 <fgetc+0x62>
    1384:	ea 85       	ldd	r30, Y+10	; 0x0a
    1386:	fb 85       	ldd	r31, Y+11	; 0x0b
    1388:	09 95       	icall
    138a:	97 ff       	sbrs	r25, 7
    138c:	09 c0       	rjmp	.+18     	; 0x13a0 <fgetc+0x62>
    138e:	2b 81       	ldd	r18, Y+3	; 0x03
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	11 f0       	breq	.+4      	; 0x1398 <fgetc+0x5a>
    1394:	80 e2       	ldi	r24, 0x20	; 32
    1396:	01 c0       	rjmp	.+2      	; 0x139a <fgetc+0x5c>
    1398:	80 e1       	ldi	r24, 0x10	; 16
    139a:	82 2b       	or	r24, r18
    139c:	8b 83       	std	Y+3, r24	; 0x03
    139e:	08 c0       	rjmp	.+16     	; 0x13b0 <fgetc+0x72>
    13a0:	2e 81       	ldd	r18, Y+6	; 0x06
    13a2:	3f 81       	ldd	r19, Y+7	; 0x07
    13a4:	2f 5f       	subi	r18, 0xFF	; 255
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	3f 83       	std	Y+7, r19	; 0x07
    13aa:	2e 83       	std	Y+6, r18	; 0x06
    13ac:	99 27       	eor	r25, r25
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <fgetc+0x76>
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	9f ef       	ldi	r25, 0xFF	; 255
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <printf_P>:
    13ba:	a0 e0       	ldi	r26, 0x00	; 0
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e3 ee       	ldi	r30, 0xE3	; 227
    13c0:	f9 e0       	ldi	r31, 0x09	; 9
    13c2:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__prologue_saves__+0x1c>
    13c6:	ae 01       	movw	r20, r28
    13c8:	49 5f       	subi	r20, 0xF9	; 249
    13ca:	5f 4f       	sbci	r21, 0xFF	; 255
    13cc:	da 01       	movw	r26, r20
    13ce:	6d 91       	ld	r22, X+
    13d0:	7d 91       	ld	r23, X+
    13d2:	ad 01       	movw	r20, r26
    13d4:	04 e9       	ldi	r16, 0x94	; 148
    13d6:	12 e0       	ldi	r17, 0x02	; 2
    13d8:	f8 01       	movw	r30, r16
    13da:	82 81       	ldd	r24, Z+2	; 0x02
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	dc 01       	movw	r26, r24
    13e0:	13 96       	adiw	r26, 0x03	; 3
    13e2:	2c 91       	ld	r18, X
    13e4:	13 97       	sbiw	r26, 0x03	; 3
    13e6:	28 60       	ori	r18, 0x08	; 8
    13e8:	13 96       	adiw	r26, 0x03	; 3
    13ea:	2c 93       	st	X, r18
    13ec:	0e 94 03 0a 	call	0x1406	; 0x1406 <vfprintf>
    13f0:	d8 01       	movw	r26, r16
    13f2:	12 96       	adiw	r26, 0x02	; 2
    13f4:	ed 91       	ld	r30, X+
    13f6:	fc 91       	ld	r31, X
    13f8:	13 97       	sbiw	r26, 0x03	; 3
    13fa:	23 81       	ldd	r18, Z+3	; 0x03
    13fc:	27 7f       	andi	r18, 0xF7	; 247
    13fe:	23 83       	std	Z+3, r18	; 0x03
    1400:	e4 e0       	ldi	r30, 0x04	; 4
    1402:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__epilogue_restores__+0x1c>

00001406 <vfprintf>:
    1406:	ab e0       	ldi	r26, 0x0B	; 11
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e9 e0       	ldi	r30, 0x09	; 9
    140c:	fa e0       	ldi	r31, 0x0A	; 10
    140e:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__prologue_saves__>
    1412:	6c 01       	movw	r12, r24
    1414:	7b 01       	movw	r14, r22
    1416:	8a 01       	movw	r16, r20
    1418:	fc 01       	movw	r30, r24
    141a:	17 82       	std	Z+7, r1	; 0x07
    141c:	16 82       	std	Z+6, r1	; 0x06
    141e:	83 81       	ldd	r24, Z+3	; 0x03
    1420:	81 ff       	sbrs	r24, 1
    1422:	cc c1       	rjmp	.+920    	; 0x17bc <vfprintf+0x3b6>
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	3c 01       	movw	r6, r24
    142a:	f6 01       	movw	r30, r12
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	f7 01       	movw	r30, r14
    1430:	93 fd       	sbrc	r25, 3
    1432:	85 91       	lpm	r24, Z+
    1434:	93 ff       	sbrs	r25, 3
    1436:	81 91       	ld	r24, Z+
    1438:	7f 01       	movw	r14, r30
    143a:	88 23       	and	r24, r24
    143c:	09 f4       	brne	.+2      	; 0x1440 <vfprintf+0x3a>
    143e:	ba c1       	rjmp	.+884    	; 0x17b4 <vfprintf+0x3ae>
    1440:	85 32       	cpi	r24, 0x25	; 37
    1442:	39 f4       	brne	.+14     	; 0x1452 <vfprintf+0x4c>
    1444:	93 fd       	sbrc	r25, 3
    1446:	85 91       	lpm	r24, Z+
    1448:	93 ff       	sbrs	r25, 3
    144a:	81 91       	ld	r24, Z+
    144c:	7f 01       	movw	r14, r30
    144e:	85 32       	cpi	r24, 0x25	; 37
    1450:	29 f4       	brne	.+10     	; 0x145c <vfprintf+0x56>
    1452:	b6 01       	movw	r22, r12
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <fputc>
    145a:	e7 cf       	rjmp	.-50     	; 0x142a <vfprintf+0x24>
    145c:	91 2c       	mov	r9, r1
    145e:	21 2c       	mov	r2, r1
    1460:	31 2c       	mov	r3, r1
    1462:	ff e1       	ldi	r31, 0x1F	; 31
    1464:	f3 15       	cp	r31, r3
    1466:	d8 f0       	brcs	.+54     	; 0x149e <vfprintf+0x98>
    1468:	8b 32       	cpi	r24, 0x2B	; 43
    146a:	79 f0       	breq	.+30     	; 0x148a <vfprintf+0x84>
    146c:	38 f4       	brcc	.+14     	; 0x147c <vfprintf+0x76>
    146e:	80 32       	cpi	r24, 0x20	; 32
    1470:	79 f0       	breq	.+30     	; 0x1490 <vfprintf+0x8a>
    1472:	83 32       	cpi	r24, 0x23	; 35
    1474:	a1 f4       	brne	.+40     	; 0x149e <vfprintf+0x98>
    1476:	23 2d       	mov	r18, r3
    1478:	20 61       	ori	r18, 0x10	; 16
    147a:	1d c0       	rjmp	.+58     	; 0x14b6 <vfprintf+0xb0>
    147c:	8d 32       	cpi	r24, 0x2D	; 45
    147e:	61 f0       	breq	.+24     	; 0x1498 <vfprintf+0x92>
    1480:	80 33       	cpi	r24, 0x30	; 48
    1482:	69 f4       	brne	.+26     	; 0x149e <vfprintf+0x98>
    1484:	23 2d       	mov	r18, r3
    1486:	21 60       	ori	r18, 0x01	; 1
    1488:	16 c0       	rjmp	.+44     	; 0x14b6 <vfprintf+0xb0>
    148a:	83 2d       	mov	r24, r3
    148c:	82 60       	ori	r24, 0x02	; 2
    148e:	38 2e       	mov	r3, r24
    1490:	e3 2d       	mov	r30, r3
    1492:	e4 60       	ori	r30, 0x04	; 4
    1494:	3e 2e       	mov	r3, r30
    1496:	2a c0       	rjmp	.+84     	; 0x14ec <vfprintf+0xe6>
    1498:	f3 2d       	mov	r31, r3
    149a:	f8 60       	ori	r31, 0x08	; 8
    149c:	1d c0       	rjmp	.+58     	; 0x14d8 <vfprintf+0xd2>
    149e:	37 fc       	sbrc	r3, 7
    14a0:	2d c0       	rjmp	.+90     	; 0x14fc <vfprintf+0xf6>
    14a2:	20 ed       	ldi	r18, 0xD0	; 208
    14a4:	28 0f       	add	r18, r24
    14a6:	2a 30       	cpi	r18, 0x0A	; 10
    14a8:	40 f0       	brcs	.+16     	; 0x14ba <vfprintf+0xb4>
    14aa:	8e 32       	cpi	r24, 0x2E	; 46
    14ac:	b9 f4       	brne	.+46     	; 0x14dc <vfprintf+0xd6>
    14ae:	36 fc       	sbrc	r3, 6
    14b0:	81 c1       	rjmp	.+770    	; 0x17b4 <vfprintf+0x3ae>
    14b2:	23 2d       	mov	r18, r3
    14b4:	20 64       	ori	r18, 0x40	; 64
    14b6:	32 2e       	mov	r3, r18
    14b8:	19 c0       	rjmp	.+50     	; 0x14ec <vfprintf+0xe6>
    14ba:	36 fe       	sbrs	r3, 6
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <vfprintf+0xc4>
    14be:	8a e0       	ldi	r24, 0x0A	; 10
    14c0:	98 9e       	mul	r9, r24
    14c2:	20 0d       	add	r18, r0
    14c4:	11 24       	eor	r1, r1
    14c6:	92 2e       	mov	r9, r18
    14c8:	11 c0       	rjmp	.+34     	; 0x14ec <vfprintf+0xe6>
    14ca:	ea e0       	ldi	r30, 0x0A	; 10
    14cc:	2e 9e       	mul	r2, r30
    14ce:	20 0d       	add	r18, r0
    14d0:	11 24       	eor	r1, r1
    14d2:	22 2e       	mov	r2, r18
    14d4:	f3 2d       	mov	r31, r3
    14d6:	f0 62       	ori	r31, 0x20	; 32
    14d8:	3f 2e       	mov	r3, r31
    14da:	08 c0       	rjmp	.+16     	; 0x14ec <vfprintf+0xe6>
    14dc:	8c 36       	cpi	r24, 0x6C	; 108
    14de:	21 f4       	brne	.+8      	; 0x14e8 <vfprintf+0xe2>
    14e0:	83 2d       	mov	r24, r3
    14e2:	80 68       	ori	r24, 0x80	; 128
    14e4:	38 2e       	mov	r3, r24
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <vfprintf+0xe6>
    14e8:	88 36       	cpi	r24, 0x68	; 104
    14ea:	41 f4       	brne	.+16     	; 0x14fc <vfprintf+0xf6>
    14ec:	f7 01       	movw	r30, r14
    14ee:	93 fd       	sbrc	r25, 3
    14f0:	85 91       	lpm	r24, Z+
    14f2:	93 ff       	sbrs	r25, 3
    14f4:	81 91       	ld	r24, Z+
    14f6:	7f 01       	movw	r14, r30
    14f8:	81 11       	cpse	r24, r1
    14fa:	b3 cf       	rjmp	.-154    	; 0x1462 <vfprintf+0x5c>
    14fc:	98 2f       	mov	r25, r24
    14fe:	9f 7d       	andi	r25, 0xDF	; 223
    1500:	95 54       	subi	r25, 0x45	; 69
    1502:	93 30       	cpi	r25, 0x03	; 3
    1504:	28 f4       	brcc	.+10     	; 0x1510 <vfprintf+0x10a>
    1506:	0c 5f       	subi	r16, 0xFC	; 252
    1508:	1f 4f       	sbci	r17, 0xFF	; 255
    150a:	9f e3       	ldi	r25, 0x3F	; 63
    150c:	99 83       	std	Y+1, r25	; 0x01
    150e:	0d c0       	rjmp	.+26     	; 0x152a <vfprintf+0x124>
    1510:	83 36       	cpi	r24, 0x63	; 99
    1512:	31 f0       	breq	.+12     	; 0x1520 <vfprintf+0x11a>
    1514:	83 37       	cpi	r24, 0x73	; 115
    1516:	71 f0       	breq	.+28     	; 0x1534 <vfprintf+0x12e>
    1518:	83 35       	cpi	r24, 0x53	; 83
    151a:	09 f0       	breq	.+2      	; 0x151e <vfprintf+0x118>
    151c:	59 c0       	rjmp	.+178    	; 0x15d0 <vfprintf+0x1ca>
    151e:	21 c0       	rjmp	.+66     	; 0x1562 <vfprintf+0x15c>
    1520:	f8 01       	movw	r30, r16
    1522:	80 81       	ld	r24, Z
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	0e 5f       	subi	r16, 0xFE	; 254
    1528:	1f 4f       	sbci	r17, 0xFF	; 255
    152a:	88 24       	eor	r8, r8
    152c:	83 94       	inc	r8
    152e:	91 2c       	mov	r9, r1
    1530:	53 01       	movw	r10, r6
    1532:	13 c0       	rjmp	.+38     	; 0x155a <vfprintf+0x154>
    1534:	28 01       	movw	r4, r16
    1536:	f2 e0       	ldi	r31, 0x02	; 2
    1538:	4f 0e       	add	r4, r31
    153a:	51 1c       	adc	r5, r1
    153c:	f8 01       	movw	r30, r16
    153e:	a0 80       	ld	r10, Z
    1540:	b1 80       	ldd	r11, Z+1	; 0x01
    1542:	36 fe       	sbrs	r3, 6
    1544:	03 c0       	rjmp	.+6      	; 0x154c <vfprintf+0x146>
    1546:	69 2d       	mov	r22, r9
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0x14a>
    154c:	6f ef       	ldi	r22, 0xFF	; 255
    154e:	7f ef       	ldi	r23, 0xFF	; 255
    1550:	c5 01       	movw	r24, r10
    1552:	0e 94 ef 0b 	call	0x17de	; 0x17de <strnlen>
    1556:	4c 01       	movw	r8, r24
    1558:	82 01       	movw	r16, r4
    155a:	f3 2d       	mov	r31, r3
    155c:	ff 77       	andi	r31, 0x7F	; 127
    155e:	3f 2e       	mov	r3, r31
    1560:	16 c0       	rjmp	.+44     	; 0x158e <vfprintf+0x188>
    1562:	28 01       	movw	r4, r16
    1564:	22 e0       	ldi	r18, 0x02	; 2
    1566:	42 0e       	add	r4, r18
    1568:	51 1c       	adc	r5, r1
    156a:	f8 01       	movw	r30, r16
    156c:	a0 80       	ld	r10, Z
    156e:	b1 80       	ldd	r11, Z+1	; 0x01
    1570:	36 fe       	sbrs	r3, 6
    1572:	03 c0       	rjmp	.+6      	; 0x157a <vfprintf+0x174>
    1574:	69 2d       	mov	r22, r9
    1576:	70 e0       	ldi	r23, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vfprintf+0x178>
    157a:	6f ef       	ldi	r22, 0xFF	; 255
    157c:	7f ef       	ldi	r23, 0xFF	; 255
    157e:	c5 01       	movw	r24, r10
    1580:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <strnlen_P>
    1584:	4c 01       	movw	r8, r24
    1586:	f3 2d       	mov	r31, r3
    1588:	f0 68       	ori	r31, 0x80	; 128
    158a:	3f 2e       	mov	r3, r31
    158c:	82 01       	movw	r16, r4
    158e:	33 fc       	sbrc	r3, 3
    1590:	1b c0       	rjmp	.+54     	; 0x15c8 <vfprintf+0x1c2>
    1592:	82 2d       	mov	r24, r2
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	88 16       	cp	r8, r24
    1598:	99 06       	cpc	r9, r25
    159a:	b0 f4       	brcc	.+44     	; 0x15c8 <vfprintf+0x1c2>
    159c:	b6 01       	movw	r22, r12
    159e:	80 e2       	ldi	r24, 0x20	; 32
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <fputc>
    15a6:	2a 94       	dec	r2
    15a8:	f4 cf       	rjmp	.-24     	; 0x1592 <vfprintf+0x18c>
    15aa:	f5 01       	movw	r30, r10
    15ac:	37 fc       	sbrc	r3, 7
    15ae:	85 91       	lpm	r24, Z+
    15b0:	37 fe       	sbrs	r3, 7
    15b2:	81 91       	ld	r24, Z+
    15b4:	5f 01       	movw	r10, r30
    15b6:	b6 01       	movw	r22, r12
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <fputc>
    15be:	21 10       	cpse	r2, r1
    15c0:	2a 94       	dec	r2
    15c2:	21 e0       	ldi	r18, 0x01	; 1
    15c4:	82 1a       	sub	r8, r18
    15c6:	91 08       	sbc	r9, r1
    15c8:	81 14       	cp	r8, r1
    15ca:	91 04       	cpc	r9, r1
    15cc:	71 f7       	brne	.-36     	; 0x15aa <vfprintf+0x1a4>
    15ce:	e8 c0       	rjmp	.+464    	; 0x17a0 <vfprintf+0x39a>
    15d0:	84 36       	cpi	r24, 0x64	; 100
    15d2:	11 f0       	breq	.+4      	; 0x15d8 <vfprintf+0x1d2>
    15d4:	89 36       	cpi	r24, 0x69	; 105
    15d6:	41 f5       	brne	.+80     	; 0x1628 <vfprintf+0x222>
    15d8:	f8 01       	movw	r30, r16
    15da:	37 fe       	sbrs	r3, 7
    15dc:	07 c0       	rjmp	.+14     	; 0x15ec <vfprintf+0x1e6>
    15de:	60 81       	ld	r22, Z
    15e0:	71 81       	ldd	r23, Z+1	; 0x01
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	93 81       	ldd	r25, Z+3	; 0x03
    15e6:	0c 5f       	subi	r16, 0xFC	; 252
    15e8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ea:	08 c0       	rjmp	.+16     	; 0x15fc <vfprintf+0x1f6>
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	07 2e       	mov	r0, r23
    15f2:	00 0c       	add	r0, r0
    15f4:	88 0b       	sbc	r24, r24
    15f6:	99 0b       	sbc	r25, r25
    15f8:	0e 5f       	subi	r16, 0xFE	; 254
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
    15fc:	f3 2d       	mov	r31, r3
    15fe:	ff 76       	andi	r31, 0x6F	; 111
    1600:	3f 2e       	mov	r3, r31
    1602:	97 ff       	sbrs	r25, 7
    1604:	09 c0       	rjmp	.+18     	; 0x1618 <vfprintf+0x212>
    1606:	90 95       	com	r25
    1608:	80 95       	com	r24
    160a:	70 95       	com	r23
    160c:	61 95       	neg	r22
    160e:	7f 4f       	sbci	r23, 0xFF	; 255
    1610:	8f 4f       	sbci	r24, 0xFF	; 255
    1612:	9f 4f       	sbci	r25, 0xFF	; 255
    1614:	f0 68       	ori	r31, 0x80	; 128
    1616:	3f 2e       	mov	r3, r31
    1618:	2a e0       	ldi	r18, 0x0A	; 10
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	a3 01       	movw	r20, r6
    161e:	0e 94 36 0c 	call	0x186c	; 0x186c <__ultoa_invert>
    1622:	88 2e       	mov	r8, r24
    1624:	86 18       	sub	r8, r6
    1626:	45 c0       	rjmp	.+138    	; 0x16b2 <vfprintf+0x2ac>
    1628:	85 37       	cpi	r24, 0x75	; 117
    162a:	31 f4       	brne	.+12     	; 0x1638 <vfprintf+0x232>
    162c:	23 2d       	mov	r18, r3
    162e:	2f 7e       	andi	r18, 0xEF	; 239
    1630:	b2 2e       	mov	r11, r18
    1632:	2a e0       	ldi	r18, 0x0A	; 10
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	25 c0       	rjmp	.+74     	; 0x1682 <vfprintf+0x27c>
    1638:	93 2d       	mov	r25, r3
    163a:	99 7f       	andi	r25, 0xF9	; 249
    163c:	b9 2e       	mov	r11, r25
    163e:	8f 36       	cpi	r24, 0x6F	; 111
    1640:	c1 f0       	breq	.+48     	; 0x1672 <vfprintf+0x26c>
    1642:	18 f4       	brcc	.+6      	; 0x164a <vfprintf+0x244>
    1644:	88 35       	cpi	r24, 0x58	; 88
    1646:	79 f0       	breq	.+30     	; 0x1666 <vfprintf+0x260>
    1648:	b5 c0       	rjmp	.+362    	; 0x17b4 <vfprintf+0x3ae>
    164a:	80 37       	cpi	r24, 0x70	; 112
    164c:	19 f0       	breq	.+6      	; 0x1654 <vfprintf+0x24e>
    164e:	88 37       	cpi	r24, 0x78	; 120
    1650:	21 f0       	breq	.+8      	; 0x165a <vfprintf+0x254>
    1652:	b0 c0       	rjmp	.+352    	; 0x17b4 <vfprintf+0x3ae>
    1654:	e9 2f       	mov	r30, r25
    1656:	e0 61       	ori	r30, 0x10	; 16
    1658:	be 2e       	mov	r11, r30
    165a:	b4 fe       	sbrs	r11, 4
    165c:	0d c0       	rjmp	.+26     	; 0x1678 <vfprintf+0x272>
    165e:	fb 2d       	mov	r31, r11
    1660:	f4 60       	ori	r31, 0x04	; 4
    1662:	bf 2e       	mov	r11, r31
    1664:	09 c0       	rjmp	.+18     	; 0x1678 <vfprintf+0x272>
    1666:	34 fe       	sbrs	r3, 4
    1668:	0a c0       	rjmp	.+20     	; 0x167e <vfprintf+0x278>
    166a:	29 2f       	mov	r18, r25
    166c:	26 60       	ori	r18, 0x06	; 6
    166e:	b2 2e       	mov	r11, r18
    1670:	06 c0       	rjmp	.+12     	; 0x167e <vfprintf+0x278>
    1672:	28 e0       	ldi	r18, 0x08	; 8
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <vfprintf+0x27c>
    1678:	20 e1       	ldi	r18, 0x10	; 16
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <vfprintf+0x27c>
    167e:	20 e1       	ldi	r18, 0x10	; 16
    1680:	32 e0       	ldi	r19, 0x02	; 2
    1682:	f8 01       	movw	r30, r16
    1684:	b7 fe       	sbrs	r11, 7
    1686:	07 c0       	rjmp	.+14     	; 0x1696 <vfprintf+0x290>
    1688:	60 81       	ld	r22, Z
    168a:	71 81       	ldd	r23, Z+1	; 0x01
    168c:	82 81       	ldd	r24, Z+2	; 0x02
    168e:	93 81       	ldd	r25, Z+3	; 0x03
    1690:	0c 5f       	subi	r16, 0xFC	; 252
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <vfprintf+0x29c>
    1696:	60 81       	ld	r22, Z
    1698:	71 81       	ldd	r23, Z+1	; 0x01
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 5f       	subi	r16, 0xFE	; 254
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	a3 01       	movw	r20, r6
    16a4:	0e 94 36 0c 	call	0x186c	; 0x186c <__ultoa_invert>
    16a8:	88 2e       	mov	r8, r24
    16aa:	86 18       	sub	r8, r6
    16ac:	fb 2d       	mov	r31, r11
    16ae:	ff 77       	andi	r31, 0x7F	; 127
    16b0:	3f 2e       	mov	r3, r31
    16b2:	36 fe       	sbrs	r3, 6
    16b4:	0d c0       	rjmp	.+26     	; 0x16d0 <vfprintf+0x2ca>
    16b6:	23 2d       	mov	r18, r3
    16b8:	2e 7f       	andi	r18, 0xFE	; 254
    16ba:	a2 2e       	mov	r10, r18
    16bc:	89 14       	cp	r8, r9
    16be:	58 f4       	brcc	.+22     	; 0x16d6 <vfprintf+0x2d0>
    16c0:	34 fe       	sbrs	r3, 4
    16c2:	0b c0       	rjmp	.+22     	; 0x16da <vfprintf+0x2d4>
    16c4:	32 fc       	sbrc	r3, 2
    16c6:	09 c0       	rjmp	.+18     	; 0x16da <vfprintf+0x2d4>
    16c8:	83 2d       	mov	r24, r3
    16ca:	8e 7e       	andi	r24, 0xEE	; 238
    16cc:	a8 2e       	mov	r10, r24
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <vfprintf+0x2d4>
    16d0:	b8 2c       	mov	r11, r8
    16d2:	a3 2c       	mov	r10, r3
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <vfprintf+0x2d6>
    16d6:	b8 2c       	mov	r11, r8
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <vfprintf+0x2d6>
    16da:	b9 2c       	mov	r11, r9
    16dc:	a4 fe       	sbrs	r10, 4
    16de:	0f c0       	rjmp	.+30     	; 0x16fe <vfprintf+0x2f8>
    16e0:	fe 01       	movw	r30, r28
    16e2:	e8 0d       	add	r30, r8
    16e4:	f1 1d       	adc	r31, r1
    16e6:	80 81       	ld	r24, Z
    16e8:	80 33       	cpi	r24, 0x30	; 48
    16ea:	21 f4       	brne	.+8      	; 0x16f4 <vfprintf+0x2ee>
    16ec:	9a 2d       	mov	r25, r10
    16ee:	99 7e       	andi	r25, 0xE9	; 233
    16f0:	a9 2e       	mov	r10, r25
    16f2:	09 c0       	rjmp	.+18     	; 0x1706 <vfprintf+0x300>
    16f4:	a2 fe       	sbrs	r10, 2
    16f6:	06 c0       	rjmp	.+12     	; 0x1704 <vfprintf+0x2fe>
    16f8:	b3 94       	inc	r11
    16fa:	b3 94       	inc	r11
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <vfprintf+0x300>
    16fe:	8a 2d       	mov	r24, r10
    1700:	86 78       	andi	r24, 0x86	; 134
    1702:	09 f0       	breq	.+2      	; 0x1706 <vfprintf+0x300>
    1704:	b3 94       	inc	r11
    1706:	a3 fc       	sbrc	r10, 3
    1708:	11 c0       	rjmp	.+34     	; 0x172c <vfprintf+0x326>
    170a:	a0 fe       	sbrs	r10, 0
    170c:	06 c0       	rjmp	.+12     	; 0x171a <vfprintf+0x314>
    170e:	b2 14       	cp	r11, r2
    1710:	88 f4       	brcc	.+34     	; 0x1734 <vfprintf+0x32e>
    1712:	28 0c       	add	r2, r8
    1714:	92 2c       	mov	r9, r2
    1716:	9b 18       	sub	r9, r11
    1718:	0e c0       	rjmp	.+28     	; 0x1736 <vfprintf+0x330>
    171a:	b2 14       	cp	r11, r2
    171c:	60 f4       	brcc	.+24     	; 0x1736 <vfprintf+0x330>
    171e:	b6 01       	movw	r22, r12
    1720:	80 e2       	ldi	r24, 0x20	; 32
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <fputc>
    1728:	b3 94       	inc	r11
    172a:	f7 cf       	rjmp	.-18     	; 0x171a <vfprintf+0x314>
    172c:	b2 14       	cp	r11, r2
    172e:	18 f4       	brcc	.+6      	; 0x1736 <vfprintf+0x330>
    1730:	2b 18       	sub	r2, r11
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <vfprintf+0x332>
    1734:	98 2c       	mov	r9, r8
    1736:	21 2c       	mov	r2, r1
    1738:	a4 fe       	sbrs	r10, 4
    173a:	10 c0       	rjmp	.+32     	; 0x175c <vfprintf+0x356>
    173c:	b6 01       	movw	r22, r12
    173e:	80 e3       	ldi	r24, 0x30	; 48
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <fputc>
    1746:	a2 fe       	sbrs	r10, 2
    1748:	17 c0       	rjmp	.+46     	; 0x1778 <vfprintf+0x372>
    174a:	a1 fc       	sbrc	r10, 1
    174c:	03 c0       	rjmp	.+6      	; 0x1754 <vfprintf+0x34e>
    174e:	88 e7       	ldi	r24, 0x78	; 120
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vfprintf+0x352>
    1754:	88 e5       	ldi	r24, 0x58	; 88
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	b6 01       	movw	r22, r12
    175a:	0c c0       	rjmp	.+24     	; 0x1774 <vfprintf+0x36e>
    175c:	8a 2d       	mov	r24, r10
    175e:	86 78       	andi	r24, 0x86	; 134
    1760:	59 f0       	breq	.+22     	; 0x1778 <vfprintf+0x372>
    1762:	a1 fe       	sbrs	r10, 1
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfprintf+0x364>
    1766:	8b e2       	ldi	r24, 0x2B	; 43
    1768:	01 c0       	rjmp	.+2      	; 0x176c <vfprintf+0x366>
    176a:	80 e2       	ldi	r24, 0x20	; 32
    176c:	a7 fc       	sbrc	r10, 7
    176e:	8d e2       	ldi	r24, 0x2D	; 45
    1770:	b6 01       	movw	r22, r12
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <fputc>
    1778:	89 14       	cp	r8, r9
    177a:	38 f4       	brcc	.+14     	; 0x178a <vfprintf+0x384>
    177c:	b6 01       	movw	r22, r12
    177e:	80 e3       	ldi	r24, 0x30	; 48
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <fputc>
    1786:	9a 94       	dec	r9
    1788:	f7 cf       	rjmp	.-18     	; 0x1778 <vfprintf+0x372>
    178a:	8a 94       	dec	r8
    178c:	f3 01       	movw	r30, r6
    178e:	e8 0d       	add	r30, r8
    1790:	f1 1d       	adc	r31, r1
    1792:	80 81       	ld	r24, Z
    1794:	b6 01       	movw	r22, r12
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <fputc>
    179c:	81 10       	cpse	r8, r1
    179e:	f5 cf       	rjmp	.-22     	; 0x178a <vfprintf+0x384>
    17a0:	22 20       	and	r2, r2
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <vfprintf+0x3a0>
    17a4:	42 ce       	rjmp	.-892    	; 0x142a <vfprintf+0x24>
    17a6:	b6 01       	movw	r22, r12
    17a8:	80 e2       	ldi	r24, 0x20	; 32
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <fputc>
    17b0:	2a 94       	dec	r2
    17b2:	f6 cf       	rjmp	.-20     	; 0x17a0 <vfprintf+0x39a>
    17b4:	f6 01       	movw	r30, r12
    17b6:	86 81       	ldd	r24, Z+6	; 0x06
    17b8:	97 81       	ldd	r25, Z+7	; 0x07
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <vfprintf+0x3ba>
    17bc:	8f ef       	ldi	r24, 0xFF	; 255
    17be:	9f ef       	ldi	r25, 0xFF	; 255
    17c0:	2b 96       	adiw	r28, 0x0b	; 11
    17c2:	e2 e1       	ldi	r30, 0x12	; 18
    17c4:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__epilogue_restores__>

000017c8 <strnlen_P>:
    17c8:	fc 01       	movw	r30, r24
    17ca:	05 90       	lpm	r0, Z+
    17cc:	61 50       	subi	r22, 0x01	; 1
    17ce:	70 40       	sbci	r23, 0x00	; 0
    17d0:	01 10       	cpse	r0, r1
    17d2:	d8 f7       	brcc	.-10     	; 0x17ca <strnlen_P+0x2>
    17d4:	80 95       	com	r24
    17d6:	90 95       	com	r25
    17d8:	8e 0f       	add	r24, r30
    17da:	9f 1f       	adc	r25, r31
    17dc:	08 95       	ret

000017de <strnlen>:
    17de:	fc 01       	movw	r30, r24
    17e0:	61 50       	subi	r22, 0x01	; 1
    17e2:	70 40       	sbci	r23, 0x00	; 0
    17e4:	01 90       	ld	r0, Z+
    17e6:	01 10       	cpse	r0, r1
    17e8:	d8 f7       	brcc	.-10     	; 0x17e0 <strnlen+0x2>
    17ea:	80 95       	com	r24
    17ec:	90 95       	com	r25
    17ee:	8e 0f       	add	r24, r30
    17f0:	9f 1f       	adc	r25, r31
    17f2:	08 95       	ret

000017f4 <fputc>:
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	fb 01       	movw	r30, r22
    17fe:	23 81       	ldd	r18, Z+3	; 0x03
    1800:	21 fd       	sbrc	r18, 1
    1802:	03 c0       	rjmp	.+6      	; 0x180a <fputc+0x16>
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	9f ef       	ldi	r25, 0xFF	; 255
    1808:	2c c0       	rjmp	.+88     	; 0x1862 <fputc+0x6e>
    180a:	22 ff       	sbrs	r18, 2
    180c:	16 c0       	rjmp	.+44     	; 0x183a <fputc+0x46>
    180e:	46 81       	ldd	r20, Z+6	; 0x06
    1810:	57 81       	ldd	r21, Z+7	; 0x07
    1812:	24 81       	ldd	r18, Z+4	; 0x04
    1814:	35 81       	ldd	r19, Z+5	; 0x05
    1816:	42 17       	cp	r20, r18
    1818:	53 07       	cpc	r21, r19
    181a:	44 f4       	brge	.+16     	; 0x182c <fputc+0x38>
    181c:	a0 81       	ld	r26, Z
    181e:	b1 81       	ldd	r27, Z+1	; 0x01
    1820:	9d 01       	movw	r18, r26
    1822:	2f 5f       	subi	r18, 0xFF	; 255
    1824:	3f 4f       	sbci	r19, 0xFF	; 255
    1826:	31 83       	std	Z+1, r19	; 0x01
    1828:	20 83       	st	Z, r18
    182a:	8c 93       	st	X, r24
    182c:	26 81       	ldd	r18, Z+6	; 0x06
    182e:	37 81       	ldd	r19, Z+7	; 0x07
    1830:	2f 5f       	subi	r18, 0xFF	; 255
    1832:	3f 4f       	sbci	r19, 0xFF	; 255
    1834:	37 83       	std	Z+7, r19	; 0x07
    1836:	26 83       	std	Z+6, r18	; 0x06
    1838:	14 c0       	rjmp	.+40     	; 0x1862 <fputc+0x6e>
    183a:	8b 01       	movw	r16, r22
    183c:	ec 01       	movw	r28, r24
    183e:	fb 01       	movw	r30, r22
    1840:	00 84       	ldd	r0, Z+8	; 0x08
    1842:	f1 85       	ldd	r31, Z+9	; 0x09
    1844:	e0 2d       	mov	r30, r0
    1846:	09 95       	icall
    1848:	89 2b       	or	r24, r25
    184a:	e1 f6       	brne	.-72     	; 0x1804 <fputc+0x10>
    184c:	d8 01       	movw	r26, r16
    184e:	16 96       	adiw	r26, 0x06	; 6
    1850:	8d 91       	ld	r24, X+
    1852:	9c 91       	ld	r25, X
    1854:	17 97       	sbiw	r26, 0x07	; 7
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	17 96       	adiw	r26, 0x07	; 7
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
    185e:	16 97       	sbiw	r26, 0x06	; 6
    1860:	ce 01       	movw	r24, r28
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	08 95       	ret

0000186c <__ultoa_invert>:
    186c:	fa 01       	movw	r30, r20
    186e:	aa 27       	eor	r26, r26
    1870:	28 30       	cpi	r18, 0x08	; 8
    1872:	51 f1       	breq	.+84     	; 0x18c8 <__ultoa_invert+0x5c>
    1874:	20 31       	cpi	r18, 0x10	; 16
    1876:	81 f1       	breq	.+96     	; 0x18d8 <__ultoa_invert+0x6c>
    1878:	e8 94       	clt
    187a:	6f 93       	push	r22
    187c:	6e 7f       	andi	r22, 0xFE	; 254
    187e:	6e 5f       	subi	r22, 0xFE	; 254
    1880:	7f 4f       	sbci	r23, 0xFF	; 255
    1882:	8f 4f       	sbci	r24, 0xFF	; 255
    1884:	9f 4f       	sbci	r25, 0xFF	; 255
    1886:	af 4f       	sbci	r26, 0xFF	; 255
    1888:	b1 e0       	ldi	r27, 0x01	; 1
    188a:	3e d0       	rcall	.+124    	; 0x1908 <__ultoa_invert+0x9c>
    188c:	b4 e0       	ldi	r27, 0x04	; 4
    188e:	3c d0       	rcall	.+120    	; 0x1908 <__ultoa_invert+0x9c>
    1890:	67 0f       	add	r22, r23
    1892:	78 1f       	adc	r23, r24
    1894:	89 1f       	adc	r24, r25
    1896:	9a 1f       	adc	r25, r26
    1898:	a1 1d       	adc	r26, r1
    189a:	68 0f       	add	r22, r24
    189c:	79 1f       	adc	r23, r25
    189e:	8a 1f       	adc	r24, r26
    18a0:	91 1d       	adc	r25, r1
    18a2:	a1 1d       	adc	r26, r1
    18a4:	6a 0f       	add	r22, r26
    18a6:	71 1d       	adc	r23, r1
    18a8:	81 1d       	adc	r24, r1
    18aa:	91 1d       	adc	r25, r1
    18ac:	a1 1d       	adc	r26, r1
    18ae:	20 d0       	rcall	.+64     	; 0x18f0 <__ultoa_invert+0x84>
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <__ultoa_invert+0x48>
    18b2:	68 94       	set
    18b4:	3f 91       	pop	r19
    18b6:	2a e0       	ldi	r18, 0x0A	; 10
    18b8:	26 9f       	mul	r18, r22
    18ba:	11 24       	eor	r1, r1
    18bc:	30 19       	sub	r19, r0
    18be:	30 5d       	subi	r19, 0xD0	; 208
    18c0:	31 93       	st	Z+, r19
    18c2:	de f6       	brtc	.-74     	; 0x187a <__ultoa_invert+0xe>
    18c4:	cf 01       	movw	r24, r30
    18c6:	08 95       	ret
    18c8:	46 2f       	mov	r20, r22
    18ca:	47 70       	andi	r20, 0x07	; 7
    18cc:	40 5d       	subi	r20, 0xD0	; 208
    18ce:	41 93       	st	Z+, r20
    18d0:	b3 e0       	ldi	r27, 0x03	; 3
    18d2:	0f d0       	rcall	.+30     	; 0x18f2 <__ultoa_invert+0x86>
    18d4:	c9 f7       	brne	.-14     	; 0x18c8 <__ultoa_invert+0x5c>
    18d6:	f6 cf       	rjmp	.-20     	; 0x18c4 <__ultoa_invert+0x58>
    18d8:	46 2f       	mov	r20, r22
    18da:	4f 70       	andi	r20, 0x0F	; 15
    18dc:	40 5d       	subi	r20, 0xD0	; 208
    18de:	4a 33       	cpi	r20, 0x3A	; 58
    18e0:	18 f0       	brcs	.+6      	; 0x18e8 <__ultoa_invert+0x7c>
    18e2:	49 5d       	subi	r20, 0xD9	; 217
    18e4:	31 fd       	sbrc	r19, 1
    18e6:	40 52       	subi	r20, 0x20	; 32
    18e8:	41 93       	st	Z+, r20
    18ea:	02 d0       	rcall	.+4      	; 0x18f0 <__ultoa_invert+0x84>
    18ec:	a9 f7       	brne	.-22     	; 0x18d8 <__ultoa_invert+0x6c>
    18ee:	ea cf       	rjmp	.-44     	; 0x18c4 <__ultoa_invert+0x58>
    18f0:	b4 e0       	ldi	r27, 0x04	; 4
    18f2:	a6 95       	lsr	r26
    18f4:	97 95       	ror	r25
    18f6:	87 95       	ror	r24
    18f8:	77 95       	ror	r23
    18fa:	67 95       	ror	r22
    18fc:	ba 95       	dec	r27
    18fe:	c9 f7       	brne	.-14     	; 0x18f2 <__ultoa_invert+0x86>
    1900:	00 97       	sbiw	r24, 0x00	; 0
    1902:	61 05       	cpc	r22, r1
    1904:	71 05       	cpc	r23, r1
    1906:	08 95       	ret
    1908:	9b 01       	movw	r18, r22
    190a:	ac 01       	movw	r20, r24
    190c:	0a 2e       	mov	r0, r26
    190e:	06 94       	lsr	r0
    1910:	57 95       	ror	r21
    1912:	47 95       	ror	r20
    1914:	37 95       	ror	r19
    1916:	27 95       	ror	r18
    1918:	ba 95       	dec	r27
    191a:	c9 f7       	brne	.-14     	; 0x190e <__ultoa_invert+0xa2>
    191c:	62 0f       	add	r22, r18
    191e:	73 1f       	adc	r23, r19
    1920:	84 1f       	adc	r24, r20
    1922:	95 1f       	adc	r25, r21
    1924:	a0 1d       	adc	r26, r0
    1926:	08 95       	ret

00001928 <__muluhisi3>:
    1928:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__umulhisi3>
    192c:	a5 9f       	mul	r26, r21
    192e:	90 0d       	add	r25, r0
    1930:	b4 9f       	mul	r27, r20
    1932:	90 0d       	add	r25, r0
    1934:	a4 9f       	mul	r26, r20
    1936:	80 0d       	add	r24, r0
    1938:	91 1d       	adc	r25, r1
    193a:	11 24       	eor	r1, r1
    193c:	08 95       	ret

0000193e <__mulshisi3>:
    193e:	b7 ff       	sbrs	r27, 7
    1940:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__muluhisi3>

00001944 <__mulohisi3>:
    1944:	0e 94 94 0c 	call	0x1928	; 0x1928 <__muluhisi3>
    1948:	82 1b       	sub	r24, r18
    194a:	93 0b       	sbc	r25, r19
    194c:	08 95       	ret

0000194e <__prologue_saves__>:
    194e:	2f 92       	push	r2
    1950:	3f 92       	push	r3
    1952:	4f 92       	push	r4
    1954:	5f 92       	push	r5
    1956:	6f 92       	push	r6
    1958:	7f 92       	push	r7
    195a:	8f 92       	push	r8
    195c:	9f 92       	push	r9
    195e:	af 92       	push	r10
    1960:	bf 92       	push	r11
    1962:	cf 92       	push	r12
    1964:	df 92       	push	r13
    1966:	ef 92       	push	r14
    1968:	ff 92       	push	r15
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	ca 1b       	sub	r28, r26
    1978:	db 0b       	sbc	r29, r27
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	09 94       	ijmp

00001986 <__epilogue_restores__>:
    1986:	2a 88       	ldd	r2, Y+18	; 0x12
    1988:	39 88       	ldd	r3, Y+17	; 0x11
    198a:	48 88       	ldd	r4, Y+16	; 0x10
    198c:	5f 84       	ldd	r5, Y+15	; 0x0f
    198e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1990:	7d 84       	ldd	r7, Y+13	; 0x0d
    1992:	8c 84       	ldd	r8, Y+12	; 0x0c
    1994:	9b 84       	ldd	r9, Y+11	; 0x0b
    1996:	aa 84       	ldd	r10, Y+10	; 0x0a
    1998:	b9 84       	ldd	r11, Y+9	; 0x09
    199a:	c8 84       	ldd	r12, Y+8	; 0x08
    199c:	df 80       	ldd	r13, Y+7	; 0x07
    199e:	ee 80       	ldd	r14, Y+6	; 0x06
    19a0:	fd 80       	ldd	r15, Y+5	; 0x05
    19a2:	0c 81       	ldd	r16, Y+4	; 0x04
    19a4:	1b 81       	ldd	r17, Y+3	; 0x03
    19a6:	aa 81       	ldd	r26, Y+2	; 0x02
    19a8:	b9 81       	ldd	r27, Y+1	; 0x01
    19aa:	ce 0f       	add	r28, r30
    19ac:	d1 1d       	adc	r29, r1
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	ed 01       	movw	r28, r26
    19ba:	08 95       	ret

000019bc <__umulhisi3>:
    19bc:	a2 9f       	mul	r26, r18
    19be:	b0 01       	movw	r22, r0
    19c0:	b3 9f       	mul	r27, r19
    19c2:	c0 01       	movw	r24, r0
    19c4:	a3 9f       	mul	r26, r19
    19c6:	70 0d       	add	r23, r0
    19c8:	81 1d       	adc	r24, r1
    19ca:	11 24       	eor	r1, r1
    19cc:	91 1d       	adc	r25, r1
    19ce:	b2 9f       	mul	r27, r18
    19d0:	70 0d       	add	r23, r0
    19d2:	81 1d       	adc	r24, r1
    19d4:	11 24       	eor	r1, r1
    19d6:	91 1d       	adc	r25, r1
    19d8:	08 95       	ret

000019da <_exit>:
    19da:	f8 94       	cli

000019dc <__stop_program>:
    19dc:	ff cf       	rjmp	.-2      	; 0x19dc <__stop_program>
